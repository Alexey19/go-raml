// Code generated by go-bindata.
// sources:
// ../templates/class_python.tmpl
// ../templates/client_helper_resource.tmpl
// ../templates/client_resource.tmpl
// ../templates/date.tmpl
// ../templates/generic_main.tmpl
// ../templates/input_validators_python.tmpl
// ../templates/oauth2_middleware.tmpl
// ../templates/oauth2_middleware_python.tmpl
// ../templates/python_client.tmpl
// ../templates/python_client_utils.tmpl
// ../templates/python_server_resource.tmpl
// ../templates/server_main.tmpl
// ../templates/server_python_main.tmpl
// ../templates/server_resources_api.tmpl
// ../templates/server_resources_interface.tmpl
// ../templates/struct.tmpl
// ../templates/struct_input_validator.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesClass_pythonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xcd\x6a\x84\x30\x14\x85\xf7\x3e\xc5\x65\x70\xd1\x82\xf5\x01\x06\x66\x53\x8a\x30\x30\xcc\x42\x84\x2e\x25\xad\x57\x27\x4c\xfe\x9a\x44\x3b\x12\x7c\xf7\xde\xf8\x07\x65\xdc\xe4\xe4\xe6\xcb\x39\xc7\x84\xd0\x60\xcb\x15\xc2\xe1\x5b\x30\xe7\x6a\x33\xfa\x9b\x56\x87\x69\x4a\x5a\xab\x25\xb4\x34\xbc\xd7\xbf\xbe\x05\x2e\x8d\xb6\x1e\x0a\x6d\xe5\x72\x44\x43\xd2\x2e\x1f\x98\xe0\x0d\xf3\xda\xba\x8d\xf9\x60\x9e\x95\xf8\xd3\x73\x8b\x4d\x06\x17\x54\x9d\xbf\x65\x50\x62\x87\x0f\x93\xc1\xb5\x97\x5f\x68\x4b\xa6\x3a\xcc\xc0\xae\xd8\x3f\xcb\xcd\xa7\xc2\x87\x2f\x38\x0a\x32\x89\xb1\xab\x3c\x2b\x4f\x4e\x76\x3b\x10\x9a\xed\x10\x17\xb8\xca\x77\xad\x05\x32\xb5\xee\xa8\x10\xee\x0c\x2d\x17\xee\xfc\x92\xc8\x95\xe9\x7d\xfd\xfc\x0b\xb2\x17\x9e\x1b\x81\xb5\x6e\x93\x10\x6c\x2c\x0b\xe9\x3d\x83\x74\x80\xe3\x09\xf2\xf3\x4c\x39\xa0\x67\x0a\x21\x1d\xe6\x05\x50\x35\x24\x92\xf9\x1d\x21\x84\xfc\xca\x24\x4e\xd3\x4b\xac\xfe\x7a\x4c\x80\x3e\x82\x36\x2b\x1c\xa3\x19\x13\xb3\xdd\x5c\xca\xd1\xe5\x05\x8a\xf3\xf5\x36\x9c\xb6\xfd\x67\x55\x54\xa3\xc1\x1d\x7a\x8b\x79\x4b\x81\x25\xf8\x2f\x00\x00\xff\xff\xd4\x95\x2f\xdb\xca\x01\x00\x00")

func TemplatesClass_pythonTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClass_pythonTmpl,
		"../templates/class_python.tmpl",
	)
}

func TemplatesClass_pythonTmpl() (*asset, error) {
	bytes, err := TemplatesClass_pythonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/class_python.tmpl", size: 458, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesClient_helper_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xd1\x6f\xda\x3e\x10\x7e\xc6\x7f\xc5\xfd\x22\xfd\x26\x1b\xd2\xb0\xa9\x4f\xad\x84\x26\xad\x55\x35\x4d\x5a\xb7\x41\xa7\x3d\x54\x55\x6b\xc8\x51\xb2\x12\x3b\x38\x17\x36\x84\xf8\xdf\xe7\x73\x42\x0a\xac\xab\xfa\x32\x69\x2f\x21\x3e\xdf\xe7\xfb\xbe\xcf\x77\x64\xbd\x3e\x82\x14\xa7\x99\x41\x88\x26\xf3\x0c\x0d\xdd\xce\x70\x5e\xa0\xbb\x75\x58\xda\xca\x4d\xb0\x8c\xe0\x68\xb3\x11\x85\x9e\x3c\xe8\x7b\x84\x3a\x49\x88\x2c\x2f\xac\x23\x90\xa2\x13\x8d\x57\xe4\xb3\xfc\x0b\x9a\x89\x4d\x33\x73\xdf\xff\x5e\x5a\xc3\x81\xcc\xf2\xd3\x20\xf5\x67\x44\x05\xbf\x4f\x73\xe2\x1f\xca\x72\x8c\x84\x12\x62\x5a\x99\x09\x04\x1c\xbe\xb3\xe9\x4a\xa6\x9a\x34\x64\x86\xd0\x4d\xf5\x04\xd7\x1b\x05\x32\xb3\xc9\x10\x75\x8a\x2e\x06\x74\xce\x3a\x05\x6b\xd1\x19\x87\x05\x9c\x0e\x80\x6b\x25\x1f\xb5\x2b\x67\x7a\x1e\xe0\x4a\x74\xb2\x69\xd8\xfd\x6f\x00\x26\x9b\x73\x7a\xc7\x21\x55\xce\xf0\x32\x00\x45\x67\x23\xb6\xb1\x40\x3f\xb9\xc4\x1f\x75\x15\x39\x56\x31\xe7\x89\x4d\xc3\x2e\xb5\x43\x5c\x7c\xcb\x68\x16\x08\xe6\x48\x33\x9b\xc6\x50\xb9\xf9\x88\x1c\x94\xe4\xbc\xe0\x18\x0e\x79\xc7\x8d\x51\xc0\xc2\x93\xb3\xf0\x1e\xc3\x2c\x54\x28\x21\xd7\xc5\x75\x8d\xbc\xd9\xc3\x2c\xca\xcf\xda\xe9\xbc\x39\xd5\x6b\xef\x06\xf8\x10\xcb\xc2\x9a\x12\xf7\x0c\xf0\x64\x5a\x0f\x0e\x0c\x7c\xa9\x03\xa2\xd3\xef\xc3\xc4\xa1\x26\x04\x9a\x21\x38\x5c\x54\x58\x12\x3b\xb3\x68\xcf\x0e\x0c\x82\x3b\x61\xf3\xd0\x80\xde\x96\x74\x0c\x4c\xe9\xe5\xa5\xa7\xd6\xc1\x43\x0c\x4b\xae\xe1\xb4\xf1\xad\xb5\x75\x87\x21\x1d\x26\x93\xbc\x0f\x91\x64\x84\x24\x7d\xaa\xef\x9d\x64\x54\x78\x67\x68\x2a\xa3\xff\x97\x51\xbc\x54\xaa\x3e\xab\x29\x50\x5b\x9e\x9c\x5b\xe9\xc1\xaa\xbd\xc0\x71\x95\xcd\xd3\x2f\x15\xba\xd5\x28\xf8\x5a\x37\xd9\xd3\x77\xa0\x1a\xef\xd7\x41\xc7\x1c\x4d\x6d\x28\x0c\x06\xf0\x7a\x57\x4b\x14\xd5\x95\xc7\xba\xc4\x70\x34\xcb\x88\xde\x46\x4f\xe9\x0a\xe5\x18\xfb\x98\xdc\x1b\xc0\x83\xb7\x2e\x1a\x44\xfe\xf9\xa8\x4b\x2e\x15\x47\x5f\x45\x7b\xb2\x5a\xd8\xf5\x29\x13\x6a\x97\xea\xe8\xcd\x0d\x8b\xec\xf7\xcf\xf9\x06\x1d\x16\x7e\x66\xb9\xe7\x86\x17\x67\xc7\xc7\x27\x27\x5c\x18\x05\xad\x0a\x84\x90\xc0\x43\x97\x5c\xf9\x07\x43\x9a\x89\xf9\x30\xfa\x74\x09\x76\xe9\x6f\x25\x4b\xd1\x7b\xd2\x06\x6b\xeb\x24\x41\x97\xb1\x0a\x76\xf2\xa5\x6f\xcc\xeb\x1b\x1e\x9b\xdd\x86\x6c\xc8\xd6\x1b\xb2\xad\x25\xbb\xa4\x92\x0b\xeb\x72\x4d\xf2\x2e\xba\xf3\xf2\xc2\x56\xa0\x78\x7c\xe2\x97\x3e\xa8\x1e\x27\xae\x25\x76\x85\x3f\xe9\x37\x62\x1c\xfc\x03\x31\xde\xfa\xbb\xc4\xbe\x9a\xfc\x29\xcf\x2a\xf3\x8c\x6b\x7b\x18\x39\x6e\x48\xa8\x9a\x1d\x93\xa3\xb2\x1d\xb4\x50\xde\x8f\x52\x89\xcc\xa7\xb7\xcb\xa6\xe7\x03\x71\xd3\x99\xfe\xff\xe9\xb9\x21\x6b\xe7\xab\x4b\x30\x08\xf7\x2e\xa9\x54\x62\x67\x06\x0f\xd4\xec\x1b\x5d\x99\x67\xac\xde\xc3\xfc\x43\x6a\x0e\x68\x36\x53\xbe\x1d\xe5\x9d\x1e\xd8\xbf\xfc\x6d\x1e\x1f\xc1\xdf\x41\x34\x69\xf8\xd4\xfd\x0a\x00\x00\xff\xff\xf3\x16\xb8\x6d\x14\x07\x00\x00")

func TemplatesClient_helper_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_helper_resourceTmpl,
		"../templates/client_helper_resource.tmpl",
	)
}

func TemplatesClient_helper_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_helper_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_helper_resource.tmpl", size: 1812, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesClient_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4d\x4f\xdb\x40\x10\x3d\x7b\x7f\xc5\xd4\x4a\x91\x4d\x8d\x73\xaf\x94\x0b\x90\x7e\x48\x14\xd1\x00\xed\xb1\x32\xf6\x98\x18\x12\xaf\xb3\xbb\x0e\x42\xae\xff\x7b\x67\x76\x6d\x27\x21\x2d\x52\x91\xda\x5e\x9a\x53\x76\x3e\xdf\xbc\x79\xbb\x6e\x9a\x23\xc8\x30\x2f\x4a\x04\x3f\x5d\x14\x58\x9a\x6f\x0a\xb5\xac\x55\x8a\x3e\x1c\xb5\xad\xa8\x92\xf4\x3e\xb9\x45\x70\x4e\x21\x8a\x65\x25\x95\x81\x40\x78\x7e\x89\x66\x3c\x37\xa6\xf2\x85\xe7\xf9\x58\xa6\x32\x2b\xca\xdb\xf1\x9d\x96\xa5\xb5\xe4\x4b\xe3\x8b\x50\x88\x54\x96\xda\x26\x28\x29\xcd\xf5\xec\x0c\x26\xe0\x37\x4d\x7c\x9c\x68\xbc\x9e\x7d\x6c\x5b\x1b\xd4\x34\xa3\xa4\x2a\xce\x93\x25\xc2\xdb\x09\xc4\xfc\x87\x9a\x9b\xc7\x0a\x81\x62\xdd\x11\xb4\x51\x75\x6a\xa0\x11\x9e\x43\x03\xdc\x3d\x3e\x71\xc8\x5a\x21\xf2\xba\x4c\xe1\x1c\x1f\x86\x8c\x20\x84\xc3\x4d\x3a\xe7\x71\xf5\x12\x1f\x82\xc1\x1a\x92\x31\xee\xca\x4d\xb6\x0b\x36\x2d\x21\x46\x53\xab\x12\x52\x2e\xde\x34\xa0\x92\x92\x98\x18\xdd\x47\x30\x5a\x5b\x98\x9f\xd0\xcc\x65\xa6\x81\xa0\x6e\xb9\x73\xf6\xe7\x1c\x30\x5a\xc7\xef\x08\xd3\x89\x5c\x2e\xa9\xa2\x8d\x1b\x8f\x69\x20\x72\x33\x9e\x06\xcb\x8c\x4c\x0c\x3b\x48\x19\x69\xcf\x01\xc1\xb2\x51\x5d\x83\x6e\x18\x6b\xb9\x48\x54\xb2\xd4\x14\xe0\x8e\x33\xd4\xd5\xb1\xcc\x1e\x6d\xb9\x22\xa7\xd9\x60\xcb\x0a\xbe\x4f\x3d\xa3\xbe\xd3\xa1\x1d\x8f\x9d\xb4\x12\x8c\x50\x29\xa9\x42\xa6\x65\xa5\x6d\x59\x86\x7c\x53\x17\x8b\xec\x73\x8d\xea\xf1\xd2\x28\xda\x67\xb0\xe2\xff\xae\x2b\x71\xc5\x7a\xa1\x36\xb8\xe2\x36\x5f\x50\xdd\x80\xff\x7e\x7a\xc5\x5d\x68\xe5\xbf\x44\x00\xeb\x44\x41\x0d\xfb\x88\x1d\x01\x94\x4a\xb4\xa4\x0a\x13\x83\xa0\x90\x3a\x92\x60\xe4\xcd\x1d\xa6\x86\x5c\x64\x88\x80\xb0\x32\x3a\x3b\x00\x6d\x78\xe6\x82\x02\xdb\x3c\x82\x5e\x59\xbb\x00\xac\x8a\x2f\x12\x33\xef\x40\xbc\xe9\x1b\x0e\x40\x86\x08\xeb\xed\x58\x88\xa0\x2c\x16\x34\xaa\xc7\x73\x52\xdb\x57\x13\x36\x30\x4d\xcf\x4d\xd8\x49\xa5\xb6\xd9\x16\xaf\x8b\xc7\x85\xc6\x8d\x7b\xd7\x77\x04\x04\xc7\xde\x32\xcf\xb3\x2c\xe4\x52\x01\xa9\xcb\x8a\xcb\xa9\x69\x8e\x49\x86\x4a\x53\x77\xe8\x7f\xc4\x47\xfc\xc1\x9a\xe3\x4b\x34\x01\xc5\xd3\x4d\x8b\x2f\x2b\xda\x96\xc9\x03\xff\xf5\x9a\x08\x59\x87\xa1\x4d\xe8\xb8\xcd\x24\x98\xf9\x40\xad\xe5\x54\x57\x03\xa9\xbd\xfe\xe3\x53\x19\x50\xc8\x3f\x18\xdd\xf3\xe8\x0d\x42\x05\x0c\x2b\xe6\xca\x74\x07\xa5\xc6\x20\x14\xcf\xa9\x8a\x2b\x6d\x7a\xbb\x91\xf8\xf5\x61\x81\x9c\x22\x3d\x47\xa8\x82\xa1\x62\x18\x3b\x53\x70\x50\x87\x62\x83\x6e\xab\x86\x2b\x40\x30\xc5\x13\x80\x2e\xf6\xa9\xec\x4f\xa7\x67\xd3\xab\xa9\x6f\x4b\xbc\x54\xbd\x5d\x8d\x41\xc0\x7f\x5c\xbf\xfb\xbb\xf8\xdb\xba\x73\x0f\xea\x9e\xe2\xb6\xf6\xf1\xf2\x57\xc4\xa1\xdc\x52\x76\x26\x89\xea\xaf\x85\x99\x73\x68\xe0\xdb\x4c\xde\x1e\x7d\x74\x7e\x97\xf3\x9f\x50\x1e\xed\xbe\x37\xab\x0e\x69\xdb\x1e\xec\xe6\x38\xc7\x77\xb8\x92\x67\xf2\x01\x15\x27\xf6\x04\x44\x3d\xd1\x51\xbf\xbd\xff\xb7\x6f\xef\xf6\x6d\x0e\xfc\x99\xdd\x9c\x76\x0e\x3f\x02\x00\x00\xff\xff\xec\xe0\x3a\x34\xc9\x08\x00\x00")

func TemplatesClient_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_resourceTmpl,
		"../templates/client_resource.tmpl",
	)
}

func TemplatesClient_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_resource.tmpl", size: 2249, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesDateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x81\x12\x5c\x40\x11\xe7\xfc\xbc\x92\xd4\xbc\x12\x08\x2f\x35\x2f\x05\xc8\x00\x04\x00\x00\xff\xff\x38\x57\x68\x75\x42\x00\x00\x00")

func TemplatesDateTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesDateTmpl,
		"../templates/date.tmpl",
	)
}

func TemplatesDateTmpl() (*asset, error) {
	bytes, err := TemplatesDateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/date.tmpl", size: 66, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesGeneric_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4f\xcd\x4b\x2d\xca\x4c\x8e\xcf\x4d\xcc\xcc\x8b\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x00\x49\x70\x71\xa5\x95\xe6\x25\x83\x99\x1a\x9a\xd5\x5c\x5c\xb5\x5c\xd5\xd5\xa9\x79\x29\x40\x55\x80\x00\x00\x00\xff\xff\xdc\x57\x73\x81\x49\x00\x00\x00")

func TemplatesGeneric_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesGeneric_mainTmpl,
		"../templates/generic_main.tmpl",
	)
}

func TemplatesGeneric_mainTmpl() (*asset, error) {
	bytes, err := TemplatesGeneric_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/generic_main.tmpl", size: 73, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesInput_validators_pythonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\xcf\x42\x49\x05\x29\x9e\x85\x1e\x3d\x7a\xf5\xba\xc4\x66\x62\x07\x37\x99\x65\x92\x28\xb2\xf4\xbb\x9b\x74\x17\xab\x7d\xa7\x65\xf8\xbd\x3f\x9b\x79\xf6\x14\x38\x11\x36\x9c\xa6\x5a\x86\x4f\x37\xb2\x77\x45\x34\x0f\xd3\x77\x39\x49\xda\x9c\xcf\x26\xa8\x44\x7c\x95\x20\x1a\xf3\xfe\x4a\x80\xe3\x24\x5a\xf0\xba\x5c\x58\xd2\xb3\xaa\xa8\x31\x2d\x12\xb1\x8e\x85\xa7\x91\x06\x09\xbb\xfe\x7d\xff\x64\xd0\x64\xad\xc5\xf1\x44\xc7\x0f\x70\x40\x8b\xaa\x04\xce\x2b\x4c\x90\xc5\xd7\x20\x73\xa1\x23\xe5\xec\xde\x09\x07\xd8\x97\x9a\x0b\xde\xe8\x37\xb7\xb3\x5b\x6f\xb1\xc5\x12\xbf\x18\x7a\xf3\xf0\xb7\xba\x6f\x7e\x40\x60\x1a\xfd\xba\xa0\xab\x75\x5f\x4e\xfb\x36\xdb\xb5\x88\xee\xc0\xdd\x01\x8f\x57\xa4\x4b\x1d\x67\xba\xfd\xbd\xdd\x3a\x6a\x6d\x54\x2a\x55\xd3\xbf\x52\x33\xcf\x94\x7c\x7b\xb7\x9f\x00\x00\x00\xff\xff\x71\x8f\x4e\xd5\x5d\x01\x00\x00")

func TemplatesInput_validators_pythonTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesInput_validators_pythonTmpl,
		"../templates/input_validators_python.tmpl",
	)
}

func TemplatesInput_validators_pythonTmpl() (*asset, error) {
	bytes, err := TemplatesInput_validators_pythonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/input_validators_python.tmpl", size: 349, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesOauth2_middlewareTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4b\x4f\xdb\x40\x10\x3e\x67\x7f\xc5\xd4\x87\xd6\x46\x60\xe8\xe3\x84\x94\x4b\xab\xb6\x54\xea\x83\x42\x2a\x0e\x55\x85\x16\x7b\x8c\x2d\x9c\x5d\x77\x77\x83\x8b\x2c\xff\xf7\xce\xbe\x42\x20\x31\x6d\x94\x44\xf6\x3c\xbe\x6f\xf6\x9b\x19\x7b\x18\x0e\xa0\xc4\xaa\x11\x08\x89\xe4\x2b\x53\xbf\xba\x5c\x36\x65\xd9\x62\xcf\x15\x26\x70\x30\x8e\xac\xe3\xc5\x0d\xbf\x46\x18\x86\xfc\xd4\x5f\x7e\xe5\x4b\x24\x07\x6b\x96\x9d\x54\x06\x52\x36\x4b\x04\x9a\xc3\xda\x98\x2e\x61\x19\x63\x87\x87\xf0\xcd\x61\x51\x8a\x8f\xfd\xb2\xc6\x84\x46\x83\x27\x82\x7b\x22\xa8\xa4\x82\x75\x30\x33\x77\x1d\x3e\x81\xa0\x8d\x5a\x15\x06\x06\x36\x2b\x51\x17\xaa\xb9\xc2\xf2\xed\x9d\xb5\x36\xe2\x9a\xcd\xaa\x06\xdb\x12\xfc\x27\xda\x74\x21\x3b\xd4\xde\xf6\xf3\x57\xb0\x8e\xae\x50\x81\xfd\x24\x53\xa1\x90\x1b\xb4\x21\xff\xac\x86\x55\x2b\x51\x3c\x09\x96\x86\x22\x22\x7f\x06\x7b\xd3\xa0\x03\xb3\xa5\xca\x25\x1c\xcf\xa7\xa9\x49\x80\x70\xb2\xe3\x70\x5c\x77\xb3\xcf\x66\xa3\x4b\x1f\x06\x68\x2a\xc8\x4f\x90\x97\xa8\xc6\x31\x40\xe6\x9b\xa2\xcd\x21\xa9\x9d\x5b\x27\xd1\xed\xf5\x23\x07\x31\xfa\xd4\x40\x9c\x44\x50\x6c\x35\x3a\xe4\xef\x2b\x54\x77\xa7\x5c\xf1\xa5\x86\x49\xfc\xdf\xeb\x20\x34\x53\x3c\x1b\x40\x5b\x64\xa2\x8c\xd8\x0a\xcd\x4a\x09\x78\x2e\x97\xa1\x77\xef\x6a\x2c\x6e\xce\xbd\xac\x85\xbd\xd6\xd0\xd7\x68\x6a\x54\xb0\xd2\xf4\x57\x73\x4d\x2d\xc1\x12\xcb\x20\x8d\xef\x52\x4a\xba\x4e\x6b\x9f\x6d\xc2\x6e\x37\xed\x4a\xca\xd6\x8e\x1e\x9d\xbf\x45\x41\x50\xb9\x0f\xc9\x60\x3e\x87\x23\xeb\x99\x85\x3a\x69\x2e\xd0\xb6\x82\x46\x92\xa6\xfb\x72\x1f\x78\xdb\xca\x9e\x6a\xa1\x9e\x2a\x2e\x68\xa3\xd6\xc9\x2e\x2d\x44\x39\xcb\x7d\xcc\x46\x80\xe5\xf4\x5e\xa2\x8a\x60\xce\xf1\x90\x72\x46\xa4\xee\x47\xdf\xe0\xa8\x38\xf5\x2c\xa8\x76\xc2\x05\x1d\x55\x45\x39\x4f\x16\x8b\x53\x52\x2a\xda\x3a\x85\x1a\x85\xe1\xa6\x91\x02\x64\x05\xa6\xa6\x85\xbd\xdf\xd4\xff\x53\x30\x50\xa4\x02\xff\x18\xb0\x8f\x85\x3c\x58\xb2\x07\x77\xb6\xf8\x50\xc5\xa6\xf9\x03\x51\xa4\x96\x27\xed\xbd\xfd\x0c\x75\x27\x85\xc6\x0b\xd5\xd0\x08\xed\x83\x82\xbd\x60\xa7\xe1\xd2\x26\x73\x22\xdc\x72\x05\xbc\x28\x50\xeb\x85\xbc\x41\x11\x77\x9f\x3c\x74\x66\xef\x00\xe3\x3c\x6e\x54\xdc\x73\xc1\x2a\xfa\x78\x62\x77\x8c\xac\x17\x79\x13\x9c\xba\x93\xff\x38\xfb\xec\x07\x37\xcd\xf2\x8f\x68\xd2\x38\xd3\x99\x15\x7f\xbd\x24\x3b\xe0\xe3\xc6\xed\x86\x0d\x3b\xb7\x85\xe8\xab\x7d\x10\x4d\x58\x01\xa4\xcf\x9d\x36\x3e\x37\x7d\x73\xf4\xd2\xa6\x04\x6d\x5d\xb2\x97\xe1\xe2\xec\xd3\xe2\x3d\x14\x92\x2a\x22\x2d\xbc\x10\x6e\x55\x5e\xe8\xb8\x21\x5e\xc8\x47\x63\x1f\xd2\x7d\xfc\x3a\x90\xca\x79\x46\x25\x6e\xaf\x4b\xb6\xbb\xa8\xd7\x3b\x8a\xb2\x13\x92\x9f\xa3\xba\x45\x3b\x87\x69\x4f\xcd\xa5\xa8\x31\xa3\x59\xb5\xaf\x26\xbb\xfd\xf6\x1d\xf4\x37\x00\x00\xff\xff\xca\x86\xcc\xcc\xa7\x06\x00\x00")

func TemplatesOauth2_middlewareTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesOauth2_middlewareTmpl,
		"../templates/oauth2_middleware.tmpl",
	)
}

func TemplatesOauth2_middlewareTmpl() (*asset, error) {
	bytes, err := TemplatesOauth2_middlewareTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/oauth2_middleware.tmpl", size: 1703, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesOauth2_middleware_pythonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xee\xc5\x09\x5e\xb3\xfd\x38\x2d\x2c\xf4\x54\x7a\x5a\x5a\xe8\xad\x14\xa3\x95\x46\x89\x1a\x45\xca\x4a\x72\x43\x30\xf9\xef\x95\x64\x39\x91\x63\x2f\x2c\xac\x0f\x89\x91\xde\xbc\xf7\xe6\x69\xac\xbe\xbf\x03\x86\x5c\x28\x84\x52\x93\xce\x6d\x3f\xb5\x7b\xc1\x98\xc4\x23\x31\xd8\x1e\x4e\x6e\xab\x55\x09\x77\xe7\x73\xc1\x8d\xde\x03\xef\x14\x75\x5a\x4b\x0b\x62\x7f\xd0\xc6\xc1\xd1\x90\x83\x4d\x7b\x92\xd8\xdd\xb8\xbe\xa9\xc1\xe0\x4b\x87\xd6\xd5\xf0\xd7\x6a\x25\xf8\xa9\x28\xa8\x47\x58\x48\x32\x7d\xdf\x3c\x91\x3d\x9e\xcf\x0f\x05\xf8\xc7\x9b\x80\xb6\x15\x4a\xb8\xb6\xad\x2c\x4a\x5e\x83\xa5\xfa\x80\xf6\xf1\x49\x2b\x5c\x0d\xa0\xf0\xf4\xbd\xe0\xd0\x7c\x47\xc2\xd0\x78\x5b\xe3\x72\x28\x69\x18\x5a\x6a\xc4\x33\xb2\xf6\xf9\x04\x8f\x50\x6e\x23\xca\x96\x53\x14\x17\x28\x59\xd8\xf6\x16\x06\x9e\xe4\xa4\xcc\x44\x50\x5a\x84\xa0\xf4\xb3\x43\x73\xfa\x41\x0c\xd9\xdb\xf7\xcb\x65\x64\x0b\x9a\x80\x8a\xc1\xad\x08\x91\x52\x1f\xbd\xc4\x90\x86\xe7\x19\x5e\x8a\x2c\x35\xea\x31\x97\xd4\x78\x96\xd5\xd7\x78\x3c\x15\x5f\x5d\x56\x42\x01\x43\xaa\x0d\x71\x9e\x33\x1e\xa7\xd0\xaa\x5a\x13\xb3\xb1\x35\xac\xd7\xbb\x63\x78\xcb\x28\xc2\xe3\xf4\x0e\x55\xe8\xa0\x9c\x2c\xfb\x74\x16\x62\xc8\x72\x98\xb2\xe4\x4c\x69\x36\x9a\x84\x6c\x36\xe8\xaa\x6b\x58\xb5\x57\x5a\x4d\x6a\x51\xbe\x2a\xf6\x72\x89\x14\xdd\xdb\x44\x43\x87\x51\xb1\x24\x94\xa2\xb5\x6d\x04\x94\x83\xea\x6d\x87\xa9\x38\x34\x3f\x67\x36\xe8\x3a\xa3\xc6\x01\xaf\x56\x35\x7c\xb9\xff\x38\xa5\xd8\x34\xb9\x88\x77\x11\xff\xa7\x98\x0f\x70\x30\xfa\x9f\x60\x08\x54\xfb\x1f\xa7\x81\x6e\x91\xee\xd2\x49\x83\xf6\x2e\xb6\x08\x39\xcf\xa4\xfc\x32\x19\xbf\xff\xcc\xec\xc7\xcc\x22\x5b\x1a\xa0\x6a\xf8\x5b\x85\x96\xbe\x11\x3f\xe4\x6f\xeb\xea\x73\xb1\x80\xe0\xb3\xb9\x29\x6e\x10\xf3\x51\xbb\xce\xed\xd4\x55\xf6\xc5\x67\xd3\x37\x76\x70\xf3\x11\x08\x0b\xe1\x56\x00\x6d\x40\xa2\xaa\x16\x20\xb1\xbf\xfb\x87\x25\xd7\xbf\x4c\x87\xd7\x9c\xb8\xe7\x48\xa5\x20\xd4\x92\xda\x94\x24\xe0\x6d\x44\x2e\x6c\x8e\x96\x83\x78\x22\x99\x03\x5e\xb5\x92\x16\xe3\xa9\x14\xe1\x62\x0e\xd7\x41\xb8\x7a\xff\x07\x00\x00\xff\xff\xfb\x91\x93\x2b\xa5\x05\x00\x00")

func TemplatesOauth2_middleware_pythonTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesOauth2_middleware_pythonTmpl,
		"../templates/oauth2_middleware_python.tmpl",
	)
}

func TemplatesOauth2_middleware_pythonTmpl() (*asset, error) {
	bytes, err := TemplatesOauth2_middleware_pythonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/oauth2_middleware_python.tmpl", size: 1445, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\xcd\xee\xda\x30\x0c\xc0\xef\x79\x0a\xab\xe2\x00\xfa\x43\x1f\x00\x89\x03\x20\x26\x21\x6d\x13\x62\x1f\xd7\x28\xb4\x2e\x44\x6b\x92\xce\x49\x98\x50\x96\x77\x5f\xd2\x96\xaa\x87\xf9\xd0\xda\x96\xfd\xf3\x57\x42\xd8\x40\x8d\x8d\xd4\x08\x45\xf7\x72\x0f\xa3\x79\xd5\x4a\xd4\x8e\x3b\x54\x5d\x2b\x1c\x16\xb0\x89\x91\x49\xd5\x19\x72\x40\xf8\xdb\xa3\x75\x96\x35\x64\x14\x8c\x91\xde\xc9\xd6\xc2\x18\x71\xf3\xb2\xad\x79\x8a\xa2\x17\xb7\x8e\xa4\xbe\x33\x76\xd8\x7f\x3b\xf1\x1f\xd7\x33\xec\xa0\x08\xa1\x3c\x08\x8b\xc9\x8a\xb1\x60\x8c\x55\xad\xb0\x16\x8e\x3d\x69\xcb\x20\x49\x6a\x07\x38\x97\x5a\x3a\xce\x97\x16\xdb\x66\x35\xf8\xb3\x64\xb3\xf4\xd4\x26\xd2\x1b\xca\x42\x00\x12\xfa\x8e\xb0\xf8\xb5\x86\xc5\x13\xb6\x3b\x28\xbf\x60\x1a\xa5\xb6\x90\x3a\x7f\x23\x43\x58\x3c\x47\xff\x57\xa1\x30\xc6\x65\xef\xb9\x08\x12\xca\xc6\x38\x2b\x52\x14\xc5\x8c\xd9\x64\x68\x93\xa9\x29\xfa\x93\xd7\xd5\xd1\x28\x95\x9a\x9d\xe0\x59\x32\xaa\x89\x31\x04\xd4\xf5\xcc\x7d\x76\x20\x2d\xa8\xbe\x28\x34\x86\x86\x26\x7e\x22\xdd\x62\x1c\xf4\x93\xae\x3b\x23\xb5\x9b\x25\xa5\xf2\x93\xee\x49\xa6\x51\xa7\xa9\x3f\x86\xa4\x2b\x5a\xe3\xa9\xc2\x8b\x70\x8f\x59\xe2\x10\x9c\xbf\x1f\xff\x39\xc3\x72\x30\xba\x7e\xde\xd5\x94\x44\xe8\x3c\xe9\xe9\xb0\xe5\xd4\x21\xfc\x85\xef\xe6\xb3\xf9\x83\x94\x56\x95\xa0\xc3\xb6\xae\x7b\xba\xa7\x6d\xad\xe1\x81\xa2\x46\xb2\xbb\xf1\xbf\xca\x67\x48\xc3\xe7\xa5\xe4\x37\x95\xd5\xfc\x6e\xfe\x05\x00\x00\xff\xff\x10\xb7\xfd\xe9\x60\x02\x00\x00")

func TemplatesPython_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_clientTmpl,
		"../templates/python_client.tmpl",
	)
}

func TemplatesPython_clientTmpl() (*asset, error) {
	bytes, err := TemplatesPython_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_client_utilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcd\x6e\xdb\x46\x10\xbe\xeb\x29\x06\x0c\x14\x93\xb5\xa8\xd0\x52\x90\x1f\x21\x6a\x0e\x45\x51\xf4\x92\x93\x73\x0a\x02\x79\x45\x0e\x2d\xd6\xe4\x2e\xbd\xbb\xb4\xc3\x04\x79\xf7\xce\xec\x92\x14\x29\x2b\x69\x0e\x35\x0c\x6a\xb5\xf3\xff\xcd\x7c\x43\x7d\xfb\x16\x43\x86\x79\x21\x11\x82\xba\xb5\x07\x25\x77\x69\x59\xa0\xb4\xbb\xc6\x16\xa5\x09\x20\xfe\xfe\x7d\x56\x54\xb5\xd2\x16\x32\x61\xd1\x16\x15\xf6\xdf\xdd\x79\x36\x23\x73\xd8\x37\x45\x99\xed\xee\x1b\xd4\xed\xce\x58\x5d\xc8\xdb\xd0\x7f\xa9\x85\x16\x95\xd9\x7e\x50\x12\xa3\xcd\x0c\xe8\x2f\x08\x02\xf7\xe9\x4c\xc0\x69\x81\xd3\x42\x8b\xda\x49\x0a\x59\x37\x16\xe0\x66\xec\xe1\x06\x36\x90\x15\xa9\x2d\x94\x14\xba\x75\x6a\xaa\xb1\xac\xe7\xc3\xc1\x63\x61\x0f\x90\x2b\x5d\x09\x0b\x37\xef\xef\xb0\xdd\x3e\x88\xf2\x39\x7d\xae\xf8\xb0\xba\x99\xc4\x2e\x72\x18\x3b\x87\xc2\x00\x67\xe8\x13\xe4\x3f\x8d\xb6\xd1\x92\xf4\x67\xee\xea\xde\xc0\x16\x82\xf7\xde\x98\x82\x00\xf9\x5d\x00\x96\x58\x51\xb2\x13\x57\x47\x17\x64\x73\xb9\x65\x45\xb8\x84\x60\x1b\xd0\x93\x32\x0d\xd9\x26\xe2\x9b\xe7\x9d\xeb\x2e\xd2\xbd\xf9\xb4\x89\xaf\x3e\x77\x70\xde\xa2\x44\x4d\x68\xef\x74\x9e\xae\xd7\xeb\xb7\x61\xb6\x80\x52\xa5\xa2\xdc\xd9\xaf\xdb\x6b\xdd\x9c\x62\xd9\xeb\x43\xa7\xef\x5a\xd3\xa1\x31\x82\xd4\x1b\x65\x54\x0b\xb7\x12\x6c\x5b\xa3\xbb\xe9\x5d\x93\xa0\x31\xe8\xbf\x7a\x17\x5f\x09\x15\x46\xcb\x52\xcc\x85\x47\xdd\x1e\x50\x3f\x16\xa4\x56\x09\x7d\x07\xc2\x40\x63\xd3\xd9\xb8\x21\x3e\x4a\x9f\x49\xd7\x1e\x17\xd0\x27\xb4\x04\xfc\x42\xdd\xbc\x59\x25\xc9\x9b\x38\x79\x19\x27\xab\xeb\x55\xb2\x49\xf8\xff\x32\x79\x4d\xcf\x69\xaf\xac\x6e\x8f\xa0\x52\x2a\x7d\xb2\xc7\xcb\x71\x51\x9c\xf5\x72\x38\xe4\x5a\x55\x7c\x30\x56\x54\x75\x98\x45\x83\x09\x96\x06\x7f\xc5\x01\xd5\x76\xd6\x07\x7e\x49\xb1\xb6\x70\x4d\x08\xfe\xa9\xb5\xd2\x47\x5f\xb5\x30\x66\xd6\x0f\x99\x54\x96\x66\xab\x90\x64\x2b\x53\xe4\x2e\x4e\x42\x44\xa3\x81\x13\x0c\xe9\xe0\x2f\xbc\xf8\xa0\x3c\xc1\x5c\x58\xa0\x91\x73\x08\xaa\xfd\x3f\x98\x12\x82\x7f\x91\x74\xae\x97\x17\x30\x77\x5d\xa4\xb4\xa2\x5f\x0d\xca\x87\x51\xe0\xb3\x75\x87\xbf\x65\x4b\xfe\xb4\x4d\x5d\x62\x18\x7d\xda\xac\x3f\x47\x93\x71\x0d\x2f\xe6\xc9\xcb\x2c\x9e\x27\x2b\xff\xb8\xe6\xc7\x66\x78\xcc\x0d\x65\x36\x81\x37\xcc\x96\x2d\x0a\x4d\xb9\x2c\x2b\x25\xed\x81\x0f\x99\x68\xf9\xe3\xa0\x1a\x7f\x5f\xc8\xc6\x22\x9f\x0c\xa6\x4a\x66\x8b\x89\x03\xd8\x0d\xa4\xe0\xcc\x78\x30\xc7\xac\x88\x18\x00\xc7\x9d\x1d\x5d\xa4\x4d\xc9\x8a\x2a\xcf\x0d\xda\x90\xab\x1a\x69\x4e\xa9\x33\x61\x06\x43\xbc\xf9\x11\x39\x36\x03\x11\x1c\x4b\x4c\x6b\x2c\xf1\xbf\x4f\x66\x31\x62\x46\x07\x52\x32\x81\x8c\xa4\x5d\x0f\x73\xf8\x78\xfd\x07\xf8\xe4\x96\x4e\xe5\xef\xdc\x8b\x32\x85\xc6\xf5\xef\x20\x1e\x10\x84\x6c\x07\xf7\x94\x67\xae\x16\xf0\x88\x27\x0c\x75\xa1\x4f\x88\x39\x84\x9f\xd4\x79\x8e\x39\xcf\x0e\x42\x66\x25\x02\xb7\x06\xf6\x48\xfc\x44\xb8\x7a\xfb\x3a\x81\x4a\x19\xda\xac\xad\x2b\x90\xdc\x22\x6f\x48\xa9\xa6\xd9\x30\x97\x69\x1d\x8f\xed\x96\x63\xa2\x72\x45\xae\xe9\xf0\xce\x09\xa7\x7c\x7b\x06\x1f\x8d\x33\x5a\x91\x83\x54\x34\xa6\x8b\xcc\x10\xc8\x8b\x1e\x01\x28\x51\xd4\xe4\xa9\x9d\xd8\x5a\x9a\x59\x37\xaf\xd5\x9d\x9b\x56\x17\x49\x63\x5d\x0a\x9a\x77\x8e\xb8\x65\xbf\xd1\x71\x84\x7f\x46\xfc\xb3\xce\x46\xc3\xdf\x0d\xbe\xcf\xb9\xc3\x8b\x12\x2a\x8b\xdb\x83\x35\xe2\x81\x96\xdb\xc2\x57\x3b\xbe\x72\x5d\x12\xa5\x3d\x9d\x0c\xbe\xee\x41\x1c\x63\xe5\x12\x70\xfd\x71\x39\x58\xca\xbd\xda\x15\x26\x33\x76\x9a\x6c\xd7\xda\xd8\xe9\x77\xfe\x7f\x52\xdb\x44\x7d\x12\x77\xaa\x7b\x1c\x58\x4f\xa1\x33\x54\xfb\xbf\x38\xb4\x57\xaa\xec\x5e\x17\x8e\x00\xc3\xbb\x2b\x03\xde\xb4\x4f\xe9\x3b\xd6\xa5\x97\xad\xdf\x0d\x66\x7c\xbb\x85\x04\xe2\xdf\xe1\xd2\xbd\x42\xa6\x82\xab\x37\xc9\x20\x5b\x9f\xc8\xe2\xf5\x2b\x2f\x8c\x93\xab\xde\xb0\xaf\x68\x50\xfa\xcf\x6d\xe2\x6b\xe1\x1d\x46\xda\x62\x6f\x42\xaf\x16\xc1\x8b\x17\xc0\x01\x9c\xd8\xaf\xb6\x13\x85\xb9\x93\xb3\xde\xab\x64\x58\xde\x5d\xe0\x77\x90\x3c\xe9\xce\xc5\x3c\x1d\x16\x2c\x2f\xfe\x30\x88\x83\x05\xf8\xed\xe9\x03\x44\x3f\x6e\xed\x53\xe3\xcb\x27\xc6\xfc\x5b\x10\x65\xe6\x7e\xf2\xfd\x1b\x00\x00\xff\xff\x4b\x7e\x1f\x35\x18\x0a\x00\x00")

func TemplatesPython_client_utilsTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_client_utilsTmpl,
		"../templates/python_client_utils.tmpl",
	)
}

func TemplatesPython_client_utilsTmpl() (*asset, error) {
	bytes, err := TemplatesPython_client_utilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client_utils.tmpl", size: 2584, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_server_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x0c\xc1\x20\xa9\xc8\x22\x87\x9e\x02\x82\x26\xa5\x85\x42\x5b\x4a\x29\xbd\x84\x22\xb6\xd1\xc8\xd9\x46\xbb\xab\x8c\x56\x0e\xc6\xdd\xff\xde\xd9\xaf\xda\x38\xd6\xc5\xbb\x3b\x6f\xde\x7b\x33\x7e\x87\xc3\x06\x7a\x1c\xa4\x46\xb8\x22\x9c\xcd\x42\x0f\xd8\x4d\x7b\xfb\x68\x74\x67\x51\x4d\xa3\xb0\x78\x05\x1b\xe7\x56\x1e\xb9\x16\x93\xfc\x2a\x14\xc2\x4d\x0b\x4d\x38\xf8\xca\x40\x46\xc1\x30\x8a\xf9\x09\xa4\x9a\x0c\x59\xb8\x1b\x17\x9c\x48\x6a\x5b\xc3\x9f\xd9\x68\x39\xec\x6b\x20\x7c\x5e\x70\xb6\xcc\x03\x24\xf4\x16\x61\xfd\x54\xc3\x7a\x17\xa8\xbe\xc8\xbe\x1f\xf1\x45\xb0\x83\x5b\xa2\x23\xe9\xe1\xb0\xde\x05\x1d\xe7\x32\xf5\x1b\x4f\x80\xba\x87\x60\xe9\x35\xd5\x77\x7c\xbe\x33\xbd\xc4\x19\x4e\x49\x8e\xfd\xf1\x76\x42\xc2\xc7\x38\xca\x5f\xf8\x61\x3e\x9b\x17\x24\x7e\xed\x78\x50\x68\x8f\x73\x94\xc5\x2b\x54\x04\x15\x35\x74\x9d\xe6\x42\xd7\x55\x97\x47\x43\xde\x65\x1f\xdc\xac\xde\xb1\x78\xde\xe0\x19\x4f\x43\x66\xb1\xe8\x65\x78\xe2\x0f\xba\x9f\x0c\xab\x3a\xc7\xf4\x2a\x12\xb4\xf7\xb1\xf6\x13\xe9\x37\xbf\xff\xf2\x6a\x59\x4c\x79\x35\xe5\xe5\x18\x70\x61\x97\x5e\x77\xa7\xd2\x22\xcb\xfb\x78\xbb\xa5\xed\xec\x5c\xe0\xf1\x9b\xf0\x38\x0e\x42\x5c\x79\x34\x9d\xf0\xe1\xe5\x9b\x20\xa1\x18\x5f\xdd\xac\x80\xbf\xa2\x28\xc2\xef\xd1\xc3\xe0\x3d\x0c\xc9\xc3\xc7\x45\x3f\xbc\x37\x4a\xa1\xb6\x73\x60\x8e\x58\x06\xfc\x3f\x67\x4d\x7f\xfb\x64\x41\xce\xf0\x28\x34\x1b\x27\x18\x0c\xc1\xc9\xa8\x70\xb6\x92\x33\x7d\x90\x43\xfe\xd3\xf7\x90\xaa\x52\x4f\x0b\x0b\xb7\x5c\xce\x25\xe7\x1a\x1f\x86\xce\xc7\xb1\x4c\x51\x6c\xb6\x68\xe3\x43\x55\xc5\xbe\x01\xb4\xb1\xa9\xbd\xd9\x89\x51\xf6\x1c\xff\x32\xcd\xec\x3f\x42\xbb\x90\xce\xa1\x2e\x91\xc8\xd0\xdc\xa6\x86\x78\xab\x6a\x78\x7b\x7d\x9d\xdd\xa5\x90\x5d\xe8\xad\x72\x06\x37\x31\x84\xf9\xf8\x2f\x00\x00\xff\xff\x1c\x97\x6e\x02\x92\x03\x00\x00")

func TemplatesPython_server_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_server_resourceTmpl,
		"../templates/python_server_resource.tmpl",
	)
}

func TemplatesPython_server_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesPython_server_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_server_resource.tmpl", size: 914, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xc1\x6a\xdc\x30\x10\x3d\xaf\xbe\x62\x10\x39\xd8\xb0\x91\x43\x4f\x21\xd0\x43\x60\x09\x5d\x68\xd3\x65\x17\x7a\x0d\xaa\x3d\xf6\x0e\x2b\x4b\x46\x1e\x6f\x03\xc6\xff\xde\x91\x9c\x6e\x4e\xf5\xc5\xd2\xe8\xbd\xa7\xf7\x66\x34\xcf\xf7\xd0\x60\x4b\x1e\x41\x8f\x18\xaf\x18\xdf\x7a\x4b\xfe\x8d\xb1\x1f\x9c\x65\xd4\x70\xbf\x2c\x6a\xb0\xf5\xc5\x76\x08\xf3\x6c\x0e\xeb\xf2\xd5\xf6\x28\x07\x8a\xfa\x21\x44\x86\x42\x6d\xb4\x0b\x9d\x96\x9f\x47\xae\xce\xcc\x83\x56\x0a\xe4\xd3\xc2\x39\x86\xc0\xfb\x0c\x3c\x58\x3e\x2f\x4b\xd5\x85\x68\x7b\x27\x88\x8d\xee\x88\xcf\xd3\x6f\x53\x87\x3e\x55\xc9\x39\x5b\xf5\xd3\xbb\x5e\xb9\x5d\x18\x2e\x9d\x21\x5f\x5d\xad\xa3\xc6\x72\x88\xe6\xfa\x45\xab\x52\xa9\x76\xf2\x35\x24\xa7\x45\x09\x73\x06\x57\x15\x90\x1f\x26\x86\x1b\x36\x97\x3f\x99\x27\xe4\x5f\xeb\x86\x82\x7f\x11\x7e\xa1\xfb\xc9\x31\x0d\x0e\x7f\xb6\x7a\x0b\xab\x29\xf3\xe3\x56\x93\x6b\x36\x11\x9e\xbe\x82\x18\x32\xaf\xf8\xe7\x18\x26\xc6\x58\x94\x6b\xb0\x79\x06\x6a\xc1\x3c\x1f\xf6\xbb\x50\x8f\x3b\x8a\x20\xfd\xf8\x30\x62\x07\x6a\xa4\x98\xb7\xd1\xa4\xd0\x87\x28\x4d\x7e\x2f\x74\x25\xed\xf8\xa4\x48\x2b\x74\x69\xbe\x59\xdf\x38\x11\x4e\x5d\x33\x27\x8e\x34\xfc\x1f\xbd\x85\x8c\x7a\x21\x87\xa7\x3c\xae\x95\x25\xa7\x85\x36\xd5\xc7\xbd\x22\x2a\xdf\x3f\x97\xe8\x9b\x64\x4d\x6d\x64\x1d\xad\x97\x31\xde\x5d\xb6\x70\x77\x4d\xc9\xcc\x11\xc7\x30\xc5\x1a\xc7\x1d\xb6\x09\x25\x20\xb3\xce\x76\xef\x25\x6c\x6b\x6b\xcc\xb1\xc7\x22\x6e\xe1\x76\x26\x9e\xe6\xa5\xcc\x8a\x37\x75\x19\xbf\x39\x44\xf2\xec\x7c\xa1\x47\xb6\x91\xc9\x77\xb0\xbe\x29\x2d\xd8\xec\xf3\x3b\x8d\x8c\xfe\xd9\x37\xd9\x7c\xa1\x9f\x1e\x1f\x1e\x1f\x24\x54\x2c\x95\x68\xa4\xc7\x98\xf4\xd2\x93\xfb\x1b\x00\x00\xff\xff\x57\x34\xca\x9d\x99\x02\x00\x00")

func TemplatesServer_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_mainTmpl,
		"../templates/server_main.tmpl",
	)
}

func TemplatesServer_mainTmpl() (*asset, error) {
	bytes, err := TemplatesServer_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_main.tmpl", size: 665, mode: os.FileMode(420), modTime: time.Unix(1463372706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_python_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\xe5\x0f\x6d\x41\xeb\xbb\xac\x63\x6e\x55\x18\x88\x0c\x27\xec\x61\x8c\x10\xdb\xdb\x1a\xd7\x26\x21\x49\x15\xc9\xfa\xdd\x97\xb4\x8a\x63\x13\xd6\x87\x42\x73\xef\x39\xf7\xd7\x73\xe3\xdc\x1c\x2a\xac\xb9\x40\x88\x0c\xea\x0b\x6a\xaa\x6e\xf6\x24\x05\xed\x18\x17\xd4\x62\xa7\x5a\x66\x31\x82\xf9\x30\x90\x5a\xcb\x0e\xea\x96\x99\x9f\xc0\x3b\x25\xb5\x85\x4d\xf8\x98\x81\x41\x51\xd1\x50\xa5\x15\xd7\x58\x5a\xa9\x6f\xe4\xde\x71\xb5\xb5\xd4\x9d\xa1\x67\x23\x05\x71\x0e\x34\x13\x0d\xc2\x9b\x17\xbd\x5d\x60\x99\x43\xb6\x47\x23\x7b\x5d\xa2\x29\xb0\x7e\x4e\x71\x2e\xdb\xb1\x0e\xe1\x17\x1c\xe4\x56\x5e\x51\x0f\xc3\x63\xe6\x8b\x12\x65\x8a\x7b\x73\x4f\x01\xde\x80\x30\xa5\x20\x9f\xd8\x12\x4a\x85\x6f\xa6\x34\x1d\x8f\xb3\x52\x8a\x9a\x37\xdf\xa3\x6f\x87\x0d\xfd\xf4\x75\xbf\xa1\xeb\xdd\xea\xe3\x76\x5d\x44\x3f\x82\x82\xb5\x06\xc9\x9f\xc4\x19\x17\xdc\x26\x5e\xeb\xdc\xff\xc1\x83\xbf\xc6\x86\x1b\xeb\x53\x3c\xb6\x3d\x2a\xcd\x85\x4d\xfe\xe1\x85\x09\x38\x9d\x88\x03\xb0\xcf\x85\xd7\x90\xad\xbe\x7c\x2e\x64\x69\x0a\x1e\x5a\xc8\x87\xd1\x4f\xf6\x16\x93\x78\xe1\x4d\x9e\xd5\x61\x58\xbc\x53\xcc\x9e\x96\xe1\xf5\x3e\x4e\x89\xdf\xe0\xb4\x83\xb3\x49\xc2\x59\xba\x24\xe0\x1f\x8d\xb6\xd7\xe2\xd5\x76\x92\xf8\x2f\xc3\x78\x06\xa3\x30\xa0\x3c\x62\xf4\x48\x8f\xf4\x20\xcf\x21\xa2\xd3\x9d\xa0\xd1\xe4\x3e\xe2\xf5\x22\xa9\xf0\xd8\x37\xf9\x41\xf7\x78\xff\xa3\x31\x8c\xdf\x01\x00\x00\xff\xff\x9a\x9f\xf1\x9f\x59\x02\x00\x00")

func TemplatesServer_python_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_python_mainTmpl,
		"../templates/server_python_main.tmpl",
	)
}

func TemplatesServer_python_mainTmpl() (*asset, error) {
	bytes, err := TemplatesServer_python_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_python_main.tmpl", size: 601, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_apiTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\xcb\x6e\xdb\x3a\x10\x5d\x5b\x5f\x31\x97\x30\x2e\xa4\x26\xa1\xb3\xe8\x2a\x41\x16\x7d\x24\x68\x8a\x36\x75\x1b\x20\x5d\x14\x45\x4c\x5b\xa3\x58\xb5\x4c\xca\x14\x65\xc3\x10\xf4\xef\x9d\x21\xe9\xaa\x4e\xe3\x8d\xc8\x79\x9c\x73\xe6\x41\x77\xdd\x19\xe4\x58\x94\x1a\x41\x58\x6c\x4c\x6b\x17\xf8\xa8\xea\xf2\xd1\xe1\xba\xae\x94\x43\x01\x67\x7d\x9f\xd4\x6a\xb1\x52\x4f\x08\x5d\x27\xa7\xe1\x78\xa7\xd6\x48\x8e\xa4\x5c\xd7\xc6\x3a\x48\x93\x51\xd7\x41\x59\x80\xbc\x43\xcc\x3f\xde\x7f\xb9\x83\xbe\x17\xa8\x17\x26\x2f\xf5\xd3\xe4\x57\x63\xb4\xa0\x00\xd4\x39\xd9\x93\x91\xd0\xe8\x26\x4b\xe7\x6a\x91\x24\x40\x3f\x72\x59\xa5\x89\x60\xbc\x3a\x85\xf1\x16\x2e\xae\x40\xbe\x99\xde\x7e\x2a\xe7\xb7\x1e\x7f\xaa\xdc\xb2\xe1\x4c\x88\x3f\x02\x1b\xaf\x88\xe1\x90\xcd\xc0\x2c\x34\x4b\xc8\x41\xfa\x59\x9e\x47\x89\x3a\x27\x13\xd6\x1e\x2e\x04\x0c\x65\x03\xfe\x43\x45\xe2\x1a\xb5\x53\xae\x34\x1a\x4c\xc1\x51\xd7\x3a\xaf\x4d\xa9\x5d\xdf\x83\x35\xc6\x31\xb6\xbf\x27\x6e\x5f\xe3\x31\x4c\xe3\x6c\xbb\x70\xd0\x25\xd4\x89\xe4\xa5\x22\x3e\xa3\x5b\x9a\xdc\x4b\xf7\x12\xc6\xdb\x68\x0a\x18\xac\xc3\x2d\x11\x96\x4a\xe7\x15\x5a\x28\x8c\x0d\x41\x0f\x68\xe7\xe4\xf6\xe7\x41\x4f\xc2\xe3\x3a\x70\x14\x4c\x52\x30\x0b\xc5\xdc\xb4\x7a\xf1\xce\xac\xb9\x94\x66\xe0\x2a\xfa\xbe\xeb\x48\x3e\x59\x0a\x0a\x48\xa9\x31\x30\xf4\xc7\x97\x90\xfd\x2b\x2a\xdd\x01\x8f\x46\x7e\xc3\xa6\x36\xba\xc1\xef\xb6\x74\x68\x4f\xc1\xc2\xab\x68\xdf\xb4\xd8\x38\xca\xe4\xa1\x0f\x82\x36\x2c\x68\x13\x05\x7d\x6d\xd1\xee\xa7\xca\x12\x22\x25\x37\x7e\x38\x3c\xab\xa0\x6c\xb5\xa1\xe2\x28\xd0\xe2\x46\xde\x18\xbb\x7e\x50\x55\x8b\xa9\x88\x1e\x91\x05\xe0\xc3\xb6\xf0\x99\x57\x8b\x88\xdf\x9a\x7c\xef\xb1\x46\x5b\x65\x39\xdd\x1b\x68\x26\xd1\xc7\x2b\x19\x69\x72\xa4\xe5\x43\x8e\x61\xb5\xc9\x88\x10\xd0\x5a\x66\xe5\x6d\xa4\x3d\xdd\xbd\xf7\x11\x36\xb5\x92\x53\x33\x19\xee\xe9\xff\x11\x36\xbb\xf4\x09\xff\x5d\x81\x2e\x2b\x2e\x76\xb4\x93\xbe\x17\x1f\x50\x71\xda\xeb\xf3\x73\x12\x3a\xb2\xe8\x5a\xab\x93\xd1\xc0\xbc\x55\x55\x99\xd3\xdb\xf9\xc3\xcd\xf6\x81\x3e\xc2\xcb\x87\x18\x96\x3e\x27\x3a\x2c\xf9\x0b\x74\xcf\x5c\xe9\x8f\x9f\xf3\x3d\x7d\x66\x9d\x20\x04\x63\xc5\x85\x98\x9d\xd0\x49\x5e\xf3\x2d\xcd\x4e\x66\xa2\x9f\x65\x43\x5a\xd4\xca\xc7\xfe\xa8\xc7\x7f\x37\xb9\xa9\x7d\x53\x87\x26\x47\x83\xef\x72\x38\xb3\xef\xd0\xc5\x6b\x1d\xba\xb8\xcb\x64\x38\x72\x03\x43\x58\x76\x79\x3c\x48\xea\x0d\xad\x61\x58\x53\x98\x63\x65\x76\x50\xf1\x5f\x8f\x33\xa0\xf2\x1c\x96\xbe\x50\x1f\xb6\x93\xb1\xea\x4c\xde\xa3\x4b\xc5\x0a\xf7\xe2\x54\x6c\x79\x4d\x68\x3b\xc2\x43\x38\xbc\xf9\xa3\xcb\xef\x00\x00\x00\xff\xff\x6d\xfa\x74\xa2\xd1\x04\x00\x00")

func TemplatesServer_resources_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_apiTmpl,
		"../templates/server_resources_api.tmpl",
	)
}

func TemplatesServer_resources_apiTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_api.tmpl", size: 1233, mode: os.FileMode(420), modTime: time.Unix(1463133183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_interfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x4d\x6f\x9c\x30\x10\x3d\xe3\x5f\x31\x42\x39\x40\xb4\x0b\xf7\x4a\x3d\xf5\x43\xed\x21\x51\x15\x45\xcd\x31\xf2\xc2\x00\x6e\xc0\xa6\xf6\x90\x4d\x84\xf8\xef\x1d\xdb\xec\x66\xd3\x6e\xda\xee\x65\xc7\xf8\xf9\xcd\x9b\xf7\x66\x9e\xb7\x50\x63\xa3\x34\x42\x6a\xd1\x99\xc9\x56\x78\xaf\x9a\x7b\xc2\x61\xec\x25\x61\x0a\xdb\x65\x11\xa3\xac\x1e\x64\x8b\x30\xcf\xc5\xb7\x58\x5e\xcb\x01\xf9\x42\x94\xe5\x6d\xa7\x1c\x34\xaa\x47\xe0\x7f\x39\x91\xd9\xb6\xa8\xd1\xf2\xdb\x1a\x76\xcf\xd0\x9a\xad\x95\x43\xcf\xc0\x8f\x06\xb4\x21\xc0\x5a\x11\xd0\xf1\x11\x43\x3a\xa9\x6b\x70\x4a\x57\x4c\x41\xb0\x57\x7d\x0f\x3b\x04\xf3\x88\x76\x6f\x15\x11\x6a\xa8\x27\xab\x74\xcb\xaf\x10\x34\x3e\x11\xac\x1d\x94\xd1\x42\xa8\x61\x34\x96\x20\x13\x49\xda\x2a\xea\xa6\x5d\x51\x99\xa1\x6c\x8d\x65\x1e\x59\x0e\xd3\x53\xca\x37\x1a\xa9\xec\x88\xc6\x54\x00\xff\xe6\x19\x54\x03\xc5\x1d\xc3\xaf\x54\x5d\xf7\xb8\x97\x16\x61\x59\xe0\x94\xe1\xc7\xe4\x48\x69\xe9\x4a\xd9\xab\x8a\x7d\xe0\x47\xa8\x6b\x9e\x39\xf7\x53\x7b\x2b\xa2\x07\x5f\x35\xa1\x6d\x64\x15\xe6\x57\xc7\x43\x63\xac\xc7\x7c\xd2\xf5\x68\xf8\x2b\x93\x5b\xe3\xa7\x5f\xcf\x82\x9e\x47\x3c\x4b\x72\xa8\xe6\x20\x35\xca\xdd\x82\x95\x9a\xfd\xbf\x78\xd8\xc0\xc5\x23\xbc\x7b\x0f\xc5\x15\x52\x67\x6a\x17\xe2\x39\x00\x83\x2c\x06\xac\x97\x91\xda\xcb\xf2\xc6\x79\x97\x7b\xb4\xab\x30\x06\x7d\x47\xbb\xe3\xeb\x50\xbf\xc8\x14\x09\x40\x72\xda\xb1\xf1\x2d\x1b\xdf\x93\x71\x9f\x27\x5d\x7d\x30\xc3\x80\x9a\xdc\x8a\x0d\x4d\x19\xb1\x2c\xf3\x1c\x0d\x4a\x92\xc0\x79\x2a\x22\xf3\xe6\x17\x37\xe8\x46\xa3\x1d\xde\x71\xac\x68\x37\x70\xb9\x7e\xfd\x39\xa1\xa3\x5c\x24\xd1\x62\x0e\x42\x2c\x6f\x78\x7c\x63\x26\x42\xe7\x47\xb2\x5c\xf9\x9d\xf8\x97\xcf\x0d\x2b\x7e\x93\x28\xb3\x70\xc9\x1b\x52\x84\x13\x0b\x52\x67\x90\x39\x07\x20\x92\xbf\x66\x70\x12\x81\xc7\xf1\x6e\xf9\xf1\x8f\x9b\xf5\x0a\x60\x8b\x2f\x21\x88\x2c\xfd\xcd\xf8\x74\x03\x61\xd3\x8a\x6b\xdc\x67\xd1\xc0\x17\x86\x65\xc9\x8b\xdb\x0e\x75\xf4\x31\x32\x58\x1f\x46\xa6\x8a\x3f\xcc\xce\xf3\xfc\x20\x6d\xed\x12\xa3\x4e\xf3\x57\x32\xb1\x77\x7e\xe9\x39\xae\x83\xa6\x40\x78\x46\xd7\xb9\x1e\xff\xd5\x21\x86\x99\x9c\xd4\x8b\x38\x1c\xfc\xe2\xfe\x0a\x00\x00\xff\xff\x90\xf7\xfa\xf7\x7e\x04\x00\x00")

func TemplatesServer_resources_interfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_interfaceTmpl,
		"../templates/server_resources_interface.tmpl",
	)
}

func TemplatesServer_resources_interfaceTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_interfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_interface.tmpl", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1462867148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x5f\x4f\xdb\x3e\x14\x7d\x6e\x3f\xc5\xfd\x45\x7d\x68\x10\x4d\xdf\x11\xe5\xe1\x37\x36\xa9\xd2\x06\x3c\xb0\xbd\x20\x04\x5e\x7a\x03\x5e\x1d\xa7\xd8\x4e\x34\x14\xe5\xbb\xef\xfa\x4f\x5a\x37\xe9\x36\x2d\x42\x10\xfb\xfe\xf1\x39\xe7\x9e\x98\xb6\xdd\x60\xc1\x25\x42\xa2\x8d\xaa\x73\xf3\x64\xb0\xdc\x09\x66\x30\xe9\xba\xe9\x8e\xe5\x5b\xf6\x82\xd0\xb6\xd9\x9d\x7f\xbd\x61\x25\x52\x60\xca\xcb\x5d\xa5\x0c\xcc\xa7\x40\x4f\xdb\x82\x62\x92\xf2\x66\xdb\x73\x98\x35\x70\xb1\x82\x6c\xed\x12\xee\x98\x79\xd5\xb0\xa0\x0a\x08\x4f\x42\xc9\xb3\x2d\x74\x5d\xd2\x97\xa2\xdc\xb8\x8c\x74\x3a\x3d\x34\xf2\x4d\xae\x51\xe7\x8a\xef\x0c\xaf\x24\x55\x4c\x97\x4b\xca\x9f\x35\x5d\x47\x7f\xa8\x8a\x76\xa8\x80\x17\x90\xdd\x4a\xfc\x4c\x1c\xae\xb1\x70\x9d\x68\x37\xde\x72\x3b\x0b\x40\xa1\xd1\x85\xcd\xfb\xce\x52\x82\xcc\x92\xa1\x28\x78\xe6\xd0\x0e\xc9\xe0\xbb\xa5\xc3\x44\x8d\x0e\xcd\x27\x8e\x62\xa3\x21\x22\x63\xd1\xd8\x70\xe6\x65\xb1\x1b\x04\x07\xdf\x42\x55\xb6\xd6\x1f\x2a\xd2\x41\x73\xc7\xa0\x60\x84\xc0\x81\x0f\xe1\x7b\x02\x42\xeb\xe7\x1f\xba\x92\x17\x24\x8c\x3d\xb1\xeb\x46\x3d\x6e\x4b\x6e\x0c\x6e\x80\x50\x52\xfa\x79\x45\x4b\x9a\x91\x79\x0f\x22\x24\xae\x20\x64\x7f\x63\x82\x6f\x98\xa9\x94\xa6\xc6\x8d\x5f\xa0\xeb\x3d\x8e\x27\xa1\xc1\xf3\x5e\x4e\xcf\x69\x01\x7e\x15\x64\x73\xef\xbd\xd2\x37\x95\xf9\x9f\x29\x5c\x4b\x83\xaa\x60\xb9\xf5\x42\x51\xcb\x1c\xe6\xda\x9a\xc4\xcb\x90\x42\x38\x05\xe7\x29\xa0\x52\x95\xda\x4b\xbb\x3c\x83\xc2\xaa\x08\x02\x1b\x14\x3d\x40\x2b\xce\xd9\x72\x7f\xfe\xd8\x4c\xc7\xca\x7b\x28\xb3\x26\xfb\x2a\xf9\x5b\x8d\x6b\x52\x63\x1f\x2b\x2d\xd3\x7e\x1c\x54\x5a\xb2\xdd\x03\xef\xc1\xb6\xdd\xa3\x1f\x75\xdb\xb5\x3e\xbd\x20\x6c\x4f\xe7\xe0\x4e\xf1\xa7\xea\x2c\xee\xd0\xee\x47\x1d\x37\x7e\x68\x1e\x61\x05\x83\x56\xfe\x37\x01\x13\x28\xe7\x71\x76\x0a\xff\xad\xdc\xe6\x51\xeb\x34\xea\xad\xd0\xd4\x8a\xfc\x51\x9a\xec\xa3\x95\xab\x98\x27\x31\x88\xb2\xd6\x06\xbe\x23\xd4\x8e\x6e\x92\x46\xc7\xf9\xcf\xa7\x8b\x17\x07\x95\x48\xec\xb3\xe8\x01\xe7\xfb\xb1\xf0\x21\x1a\x0d\xc0\x0e\xfa\x3e\xfb\xc2\xa5\x97\xb6\xff\x7c\x03\x37\x9d\xc2\xa5\x1d\xf6\x21\xe3\x48\xa8\x13\x64\xa8\x0a\xf4\x6b\x55\xd3\xdc\x89\xc6\xd5\x0a\x86\xe5\x03\x4e\x8b\x23\x52\x01\x0d\xfb\xf9\x3b\x34\x57\xa1\x5d\xc8\xf8\x37\x34\x97\xab\x61\xf5\x1f\xc1\x80\x47\x33\x70\xde\x84\x6e\xa6\x92\x6d\xc9\x3d\xb5\x42\xe0\x06\xb8\x0e\xd3\xf2\xa6\xfc\x8b\x13\x27\x27\x6c\x48\x1c\x26\x93\x72\xe4\xb4\x09\xfd\xf4\x1e\x3b\x18\x2b\x75\xd9\x27\xb8\xe6\x95\x10\x98\xbb\x39\x13\x24\x59\x99\x83\x89\x26\x47\x04\x8f\x5c\x93\x33\x21\xe0\xa5\x5a\x34\xfd\x65\xd1\x5f\x1b\x68\xe9\xdb\x2e\xd1\xed\x3a\xf0\xcd\xe0\x2a\x8e\x66\x20\xb9\xd8\xdb\xb4\xbf\x8a\xa3\xf0\xf8\x30\xe2\x35\xfc\x1f\xe1\xee\xf6\x00\xb7\xbf\xb4\x7e\x05\x00\x00\xff\xff\xc3\xc1\x18\x45\xc2\x06\x00\x00")

func TemplatesStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesStructTmpl,
		"../templates/struct.tmpl",
	)
}

func TemplatesStructTmpl() (*asset, error) {
	bytes, err := TemplatesStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/struct.tmpl", size: 1730, mode: os.FileMode(420), modTime: time.Unix(1463373932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesStruct_input_validatorTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\xc1\x8a\xe3\x30\x0c\x86\xcf\xf1\x53\x68\x03\x65\x63\x28\xe9\x2e\x94\x1e\x0a\x3d\xee\xde\x76\x67\xde\xa0\x78\x1c\xb9\x35\x93\x38\xc1\x91\x3d\x0c\x26\xef\x3e\x72\x92\x76\x4a\x2f\x6d\x90\xf4\xff\xfa\x3f\x39\xa5\x06\x8d\x75\x08\xe5\x48\x3e\x68\x3a\x5b\x37\x04\x3a\x47\xd5\xda\x46\x51\xef\xcf\x84\xdd\xd0\x2a\xc2\x72\x9a\xc4\xa0\xf4\xbb\xba\x20\xa4\x54\xbf\x2e\x9f\xff\x55\x87\xdc\x10\xb6\x1b\x7a\x4f\x50\x89\xa2\x34\x1d\x95\xfc\xc7\x76\xba\x77\xb1\x14\x52\x08\x13\x9c\x86\x7f\xa1\x25\x3b\xb4\xf8\x62\x2a\x17\x3a\xb0\x8e\xd0\x1b\xa5\x31\x4d\x5b\xe0\x75\x01\x81\x25\xd6\x5d\x24\xa0\xf7\xbd\x87\x24\x8a\xa8\x3c\xf0\xec\xdf\xb6\x57\x04\x26\xff\x1e\xf6\x42\x14\xe3\x87\x25\x7d\x85\x08\xc7\x53\x6e\xd7\x15\x7d\x0e\x28\xb3\x40\xab\x11\xb3\xf3\x51\x14\xc5\x5d\x78\xba\x49\xab\x28\xd7\x91\xb5\xf0\x34\x16\x45\xc1\xc7\x50\x9c\x33\x37\x3c\x52\xf0\x0e\x18\xa7\xfe\x93\x03\x99\xaa\xdc\x44\xd0\xca\xfd\x24\x78\x43\x08\x23\x36\xc0\x41\xae\xd0\xdd\xc1\x4a\x26\xe1\x15\x7c\x8f\x62\x26\x9a\x8d\xb7\x99\x27\x47\x5d\x2f\xc2\xa7\xf3\xe3\xd2\xaa\xe6\xa9\x2d\x1c\xf6\xac\xb2\x66\x1e\xfc\xc1\x4c\xb6\xcd\x30\xb7\x04\x5c\x5d\x3c\x3d\x8e\x2b\xf2\x92\x78\x07\xdf\x5b\x66\x7d\x95\x27\x76\x77\x5c\x3e\x44\xae\x48\x29\xb3\xeb\xef\xfa\xd7\xa3\xeb\x13\x97\x1d\xc1\xf5\xf4\xc0\x02\x9b\xc8\x38\xbc\x6b\x7d\x1d\x79\xcb\x30\xab\x39\xa2\x98\x44\x4a\xe8\x1a\x7e\xfe\xaf\x00\x00\x00\xff\xff\x16\xec\x5e\x2d\x45\x02\x00\x00")

func TemplatesStruct_input_validatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesStruct_input_validatorTmpl,
		"../templates/struct_input_validator.tmpl",
	)
}

func TemplatesStruct_input_validatorTmpl() (*asset, error) {
	bytes, err := TemplatesStruct_input_validatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/struct_input_validator.tmpl", size: 581, mode: os.FileMode(420), modTime: time.Unix(1463372452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../templates/class_python.tmpl": TemplatesClass_pythonTmpl,
	"../templates/client_helper_resource.tmpl": TemplatesClient_helper_resourceTmpl,
	"../templates/client_resource.tmpl": TemplatesClient_resourceTmpl,
	"../templates/date.tmpl": TemplatesDateTmpl,
	"../templates/generic_main.tmpl": TemplatesGeneric_mainTmpl,
	"../templates/input_validators_python.tmpl": TemplatesInput_validators_pythonTmpl,
	"../templates/oauth2_middleware.tmpl": TemplatesOauth2_middlewareTmpl,
	"../templates/oauth2_middleware_python.tmpl": TemplatesOauth2_middleware_pythonTmpl,
	"../templates/python_client.tmpl": TemplatesPython_clientTmpl,
	"../templates/python_client_utils.tmpl": TemplatesPython_client_utilsTmpl,
	"../templates/python_server_resource.tmpl": TemplatesPython_server_resourceTmpl,
	"../templates/server_main.tmpl": TemplatesServer_mainTmpl,
	"../templates/server_python_main.tmpl": TemplatesServer_python_mainTmpl,
	"../templates/server_resources_api.tmpl": TemplatesServer_resources_apiTmpl,
	"../templates/server_resources_interface.tmpl": TemplatesServer_resources_interfaceTmpl,
	"../templates/struct.tmpl": TemplatesStructTmpl,
	"../templates/struct_input_validator.tmpl": TemplatesStruct_input_validatorTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"class_python.tmpl": &bintree{TemplatesClass_pythonTmpl, map[string]*bintree{}},
			"client_helper_resource.tmpl": &bintree{TemplatesClient_helper_resourceTmpl, map[string]*bintree{}},
			"client_resource.tmpl": &bintree{TemplatesClient_resourceTmpl, map[string]*bintree{}},
			"date.tmpl": &bintree{TemplatesDateTmpl, map[string]*bintree{}},
			"generic_main.tmpl": &bintree{TemplatesGeneric_mainTmpl, map[string]*bintree{}},
			"input_validators_python.tmpl": &bintree{TemplatesInput_validators_pythonTmpl, map[string]*bintree{}},
			"oauth2_middleware.tmpl": &bintree{TemplatesOauth2_middlewareTmpl, map[string]*bintree{}},
			"oauth2_middleware_python.tmpl": &bintree{TemplatesOauth2_middleware_pythonTmpl, map[string]*bintree{}},
			"python_client.tmpl": &bintree{TemplatesPython_clientTmpl, map[string]*bintree{}},
			"python_client_utils.tmpl": &bintree{TemplatesPython_client_utilsTmpl, map[string]*bintree{}},
			"python_server_resource.tmpl": &bintree{TemplatesPython_server_resourceTmpl, map[string]*bintree{}},
			"server_main.tmpl": &bintree{TemplatesServer_mainTmpl, map[string]*bintree{}},
			"server_python_main.tmpl": &bintree{TemplatesServer_python_mainTmpl, map[string]*bintree{}},
			"server_resources_api.tmpl": &bintree{TemplatesServer_resources_apiTmpl, map[string]*bintree{}},
			"server_resources_interface.tmpl": &bintree{TemplatesServer_resources_interfaceTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{TemplatesStructTmpl, map[string]*bintree{}},
			"struct_input_validator.tmpl": &bintree{TemplatesStruct_input_validatorTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

