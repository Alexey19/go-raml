// Code generated by go-bindata.
// sources:
// date_only.go
// datetime.go
// datetime_only.go
// datetime_rfc2616.go
// time_only.go
// DO NOT EDIT!

package date

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _date_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x98\xfa\x24\xed\xc6\x5e\x77\x03\x85\x16\x72\x28\x2d\x39\x94\x6e\xb7\xec\xa6\xa7\x52\x88\x12\x8f\x13\x11\x4b\x32\x92\x1c\x70\x4b\xff\xfb\x4a\xb2\x13\x27\x24\x10\x1d\x12\x18\xbd\x37\xf3\xbd\xb1\x1a\xbe\xde\xf1\x0d\x42\xc9\x1d\x12\x22\x64\xa3\x8d\x03\x4a\x92\xd4\x09\x89\x29\x61\x84\xec\xb9\x09\x85\x20\x78\x56\x75\x37\x97\x0e\xfa\x33\x83\xf4\xb1\x28\x3e\x64\xc5\xfb\xac\x78\x4c\xcf\x14\x0b\xb1\xde\x61\xe9\x15\xcb\x74\x09\xf7\x70\xea\xbd\x0f\xb5\xd0\xf7\xe1\x01\xbe\x0e\x75\x30\xd8\x18\xb4\xa8\x1c\xbc\x7c\x7e\xfa\x1e\xf5\x99\x0e\x17\xae\x6b\x30\x28\x17\x5b\x84\xb4\x6a\xeb\x3a\x0b\x77\x29\x28\xed\xb8\x13\x5a\x81\xae\xe0\x65\xfe\x65\x3a\x9d\x7e\x9c\x80\xe2\x12\xbd\xa7\xf3\x27\x93\x32\x2b\xcb\x3c\x0e\xd1\x68\x83\x1e\x6c\xdb\xc4\x74\x21\x19\x68\xd3\xff\xff\xd5\xca\x8f\xaa\x2a\x8b\xee\xd8\x34\x27\x61\xec\x48\x17\x84\xf9\xc2\xff\x44\xe8\x27\x6e\xec\x96\xd7\xdf\x5e\x9f\x7f\x80\xde\xa3\x31\xa2\x44\x90\x63\x91\x54\xad\x5a\x03\x2d\x35\xdc\x1d\x3a\xb0\x53\x13\x65\x40\x7f\xff\x59\x75\x0e\x27\xe0\xdd\xda\x30\xf8\x47\x12\x83\xae\x35\x0a\xfa\x0b\x7a\x9c\x48\xef\x4a\xcd\xf2\xb9\x36\x92\x3b\x7a\xb1\x60\xc6\x7c\x68\x51\x93\xff\x11\xec\x97\x92\xd7\xd0\x5a\x75\x0b\xee\xcc\x48\x57\x03\x04\xeb\xe9\x02\x9c\xb3\x11\x15\x3e\xcd\xfa\x5d\xfc\xf4\x72\xbc\xc4\x99\x80\x75\x46\xa8\x0d\x5d\x31\x46\x12\x51\x45\xcf\xbb\x59\x40\x0c\x5d\x0e\x19\x7d\x95\x24\x1e\x39\xf1\xd9\xfc\x13\x39\x70\x50\x67\xd9\x71\x0f\x63\xaa\xd7\xd8\x12\xfa\xba\x1d\x26\x8c\x0f\x26\x7e\xb0\xab\xa9\x7a\xa3\xdf\xf6\x60\x19\x97\x7c\x73\xbb\xcc\xcf\x7e\x0b\x00\x00\xff\xff\x10\x9a\x87\x5d\x19\x03\x00\x00")

func date_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_date_onlyGo,
		"date_only.go",
	)
}

func date_onlyGo() (*asset, error) {
	bytes, err := date_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "date_only.go", size: 793, mode: os.FileMode(420), modTime: time.Unix(1462763802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetimeGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xcd\x6e\xe2\x30\x14\x85\xd7\xf1\x53\xdc\xc9\x66\x6c\x7e\x03\x0c\x23\x81\xc4\xaa\x15\x8b\x4a\xfd\x51\xa1\x9b\x56\x95\x30\xc4\xa1\x16\xc4\x89\xec\x0b\x12\xaa\xfa\xee\xb5\x9d\x84\x80\x40\xc2\xab\xe8\xd8\xe7\xdc\xef\x9e\xe4\x7c\xb5\xe1\x6b\x01\x31\x47\x41\x88\x4c\xf3\x4c\x23\x50\x12\x84\x28\x53\x11\x12\x46\xc8\x9e\x6b\x27\xb8\x07\x73\xab\x4d\x53\x84\xe2\x4c\x20\xec\x47\xd1\xff\x76\xd4\x6b\x47\xfd\x79\x6f\x38\x8e\xfe\x8d\xa3\x61\x67\x54\x9d\xf7\xf0\xcc\x35\x97\xab\x8d\x88\xad\x6b\x11\x2e\xa0\x09\xa7\x79\x4d\xa7\xb9\x59\xdd\x2e\xdc\x97\x3a\x48\x03\x8e\xc1\x20\x4f\x73\x90\x0a\x42\xe7\x68\x7b\x2c\x48\x32\x9d\x72\x84\x58\x24\x52\xd9\x4c\x7b\xfb\x3a\xbd\x1b\x0c\x06\x23\x82\x87\x5c\xd4\x19\xee\x75\xc7\x7d\xf9\xe8\x47\xae\xcd\x17\xdf\x3e\xcc\x9e\x9f\x20\xdb\x0b\xad\x65\x2c\x20\xad\x45\x92\xec\xd4\x0a\x68\x8c\xd0\xa8\x12\xd8\xa9\x89\x32\xa0\x1f\x9f\xcb\x03\x8a\x16\x58\x77\xa6\x19\x7c\x93\x40\x0b\xdc\x69\x05\xc5\x05\x3d\x4e\xa4\x8d\x18\x59\x67\xea\x41\xe9\x45\x0d\x8c\xb5\x40\xc9\x2d\xf9\xf1\x60\x6f\x2a\xbd\x86\xb6\x53\xb7\xe0\xce\x8c\x74\x59\x42\xb0\x82\xce\xc1\xa1\xf1\xa8\x30\x9e\x14\x5d\xbc\xd8\xe7\xe2\x12\xa7\x05\x06\xb5\x54\x6b\xba\x64\x8c\x04\x32\xf1\x9e\x3f\x13\x87\xe8\x52\xaa\x1d\xad\x4a\x02\x8b\x1c\xd8\xdd\xec\x8f\xac\x38\x28\x1a\x76\xec\xa1\xde\x6a\xe6\x23\xa1\xd0\x0d\x48\xfc\x6b\xca\x31\x56\xcb\xb5\x30\x42\x21\x47\x99\xa9\xab\xab\x15\x6e\x5b\x79\x69\xa9\x9b\xbe\x59\x31\xb3\x00\xbf\x01\x00\x00\xff\xff\xb5\x10\x2c\xd8\xd8\x02\x00\x00")

func datetimeGoBytes() ([]byte, error) {
	return bindataRead(
		_datetimeGo,
		"datetime.go",
	)
}

func datetimeGo() (*asset, error) {
	bytes, err := datetimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime.go", size: 728, mode: os.FileMode(420), modTime: time.Unix(1462766876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x51\x6f\xd3\x30\x10\xc7\x9f\xe3\x4f\x71\xe4\xc9\xde\x1a\x2f\x9b\x18\xd2\x22\xf5\x01\x31\xed\x01\x31\x86\x58\x78\x9a\x26\xcd\x6d\x2e\xab\xb5\xda\x8e\xec\xeb\x50\x41\x7c\x77\xec\xa4\x34\x19\x14\x69\x7e\x88\xa2\xbb\xfb\xff\xef\x77\x67\x77\x6a\xf9\xa4\x1e\x11\x1a\x45\xc8\x98\x36\x9d\xf3\x04\x9c\x65\x39\x69\x83\x39\x13\x8c\x3d\x2b\x9f\x02\xa9\x20\xc5\x6e\xec\x7a\x7b\x65\x08\x86\x33\x87\xfc\xac\x2c\xdf\x15\xe5\x69\x51\x9e\xd5\xa7\xe7\x55\xf9\xb6\x2a\xcf\xe5\xc5\x45\xfe\x8f\xa2\xd6\xcb\x27\x6c\xa2\xe2\x21\x7f\x80\x63\xf8\xdb\xef\x38\xc5\x53\xbf\x93\x13\xb8\x9c\xe4\xc0\x63\xe7\x31\xa0\x25\xf8\xfa\xfe\xfa\xd3\x5e\x57\xb8\x94\xa4\x6d\x87\x49\xf1\xc1\x99\x85\xb6\xd1\x3e\xa5\x87\x94\xb2\x0d\x8c\x85\xdf\x35\xad\x40\x41\xc0\x4e\x79\x45\xce\x83\x6b\x21\xaf\xf3\x59\x12\x5b\x65\x30\x96\x6c\xe3\x29\x8c\x29\x9a\xa6\x5e\xad\x2a\x63\xaa\x10\xee\x64\xdb\x4a\x29\xef\x25\x5c\x3a\x0c\x60\x1d\x41\xd8\x74\xfd\x8e\x54\x6f\x0e\x3f\x9c\xc5\xe8\xd5\x06\x24\xc9\x12\xcd\x4b\xf8\xf4\x23\xeb\xf8\xe9\xe7\xba\x56\x3e\xac\xd4\xfa\xe3\xed\xcd\x67\x70\xcf\xe8\xbd\x6e\x10\xcc\x18\x64\xed\xc6\x2e\x81\x37\xe4\xe0\x68\x6a\x23\xa6\x4a\x2e\x80\xdf\xdd\x2f\xb6\x84\x33\x88\x16\xce\x0b\xf8\xc9\x32\x8f\xb4\xf1\x16\x86\x04\xdf\xb7\xe5\x47\xd1\x4c\xc8\x2b\xe7\x8d\x22\x7e\xf0\x46\x84\x98\x81\xd5\x6b\xf6\xab\x47\xfc\x66\xcd\x21\xc8\x8d\x7d\x15\xe6\x0b\x35\x5f\xec\x70\xc4\xc0\x99\x30\x29\xf4\xd0\x50\xcd\x87\xd5\x7c\x89\xe5\x78\x98\x6b\x06\x81\xbc\xb6\x8f\x7c\x21\x04\xcb\x74\xdb\xeb\xde\xcc\x13\x6b\x72\xfa\x33\x71\x8c\xb2\x2c\xb2\x67\x69\xd2\xf8\xba\xa6\x40\x9c\x82\xd8\xaf\x66\x9c\xf1\xb6\xf7\x85\x21\x1e\x76\x6d\xc6\x77\xa6\x48\x3b\xfb\xff\x19\x07\x75\xbc\x85\x9d\x6e\x5c\xfe\xeb\xb6\x2e\x22\xc5\xef\x00\x00\x00\xff\xff\xb1\x36\x35\x97\x76\x03\x00\x00")

func datetime_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_onlyGo,
		"datetime_only.go",
	)
}

func datetime_onlyGo() (*asset, error) {
	bytes, err := datetime_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_only.go", size: 886, mode: os.FileMode(420), modTime: time.Unix(1462763802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_rfc2616Go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x4f\x8f\xda\x30\x10\xc5\xcf\xf1\xa7\x78\xcd\xa5\x36\x44\x10\x50\xe1\x80\xc4\xa9\x15\x07\x24\xda\xaa\xd0\x53\x55\x09\x43\x0c\xb5\x20\x4e\x64\x0f\x48\xa8\xda\xef\xbe\x76\xc2\x9f\x85\x85\x15\x3e\xbe\xf1\x7b\xf3\x9b\x99\x52\x2e\x37\x72\xad\x90\x49\x52\x8c\xe9\xbc\x2c\x2c\x81\xb3\x28\x26\x9d\xab\x98\x09\xc6\xf6\xd2\x06\x21\x7c\x98\x79\xed\xd7\xe8\x6b\xb7\xdf\xe9\x8f\x72\x42\xfd\x86\x88\x27\x85\x49\x90\x76\x31\x96\x06\xdd\x34\xed\xa3\xd3\x1b\xa4\x5f\x06\x69\x0f\x93\xe9\x2c\xbe\xe7\x9d\xe9\xe5\x46\x65\xde\x3b\x8f\xe7\x68\xe2\x4e\x78\x33\x94\x42\xff\x76\x1b\xdf\xae\xcb\xd0\x0e\x01\xcf\x91\xcc\x4b\x68\x83\x93\xbe\x2a\x6c\x2e\x89\xd1\xa1\x54\xef\x3c\xc1\xd0\x0a\x42\x95\x38\x91\xd6\xfd\x93\xdb\xf1\xf4\xc7\x77\x14\x7b\x65\xad\xce\x14\xf2\x8b\xc8\x56\x3b\xb3\x04\xcf\x08\x8d\x9b\x20\xf1\xd6\xcb\x05\xf8\x9f\xbf\x8b\x03\xa9\x04\x3e\xa4\xb0\x02\xff\x59\x64\x15\xed\xac\x41\x5d\xe0\xe7\xc6\xbc\x91\x91\x68\x8d\x2a\x46\xfe\x68\x25\x42\x24\x30\x7a\xcb\x5e\x2a\xcc\xdf\x26\xbf\x07\xba\x33\x4f\xa2\x5e\xf9\xf9\xe2\x88\x24\x6a\xd6\x80\x4a\xae\x02\xc7\x60\x58\x2f\xe8\xa7\xff\xae\x1e\xc2\x25\x70\x64\xb5\x59\xf3\x85\x10\x2c\xd2\xab\xca\xfa\x69\x18\x80\x43\xd8\x69\x70\xaf\xb2\xc8\x0f\x10\xf9\x81\xfd\x89\x6f\xa8\x38\x39\x71\xde\xd1\x65\xd4\x69\x95\x8c\x5a\x77\xd0\xf4\xd9\x1d\xbb\x79\xad\xb4\xca\x29\x43\x92\x74\x61\x3e\x9a\xb7\x0e\xf1\x57\x39\x3a\x2f\xc7\x78\xf6\x0a\xc2\xe3\xbc\x06\x00\x00\xff\xff\xe4\xf1\xdc\x20\x14\x03\x00\x00")

func datetime_rfc2616GoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_rfc2616Go,
		"datetime_rfc2616.go",
	)
}

func datetime_rfc2616Go() (*asset, error) {
	bytes, err := datetime_rfc2616GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_rfc2616.go", size: 788, mode: os.FileMode(420), modTime: time.Unix(1462766853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _time_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x41\x4f\xdc\x30\x10\x85\xcf\xf1\xaf\x98\xe6\x64\xc3\x62\xa8\xb6\x1c\x36\xd2\x1e\xaa\x56\x7b\xa8\x4a\xa9\x80\x9e\x10\x12\xde\xdd\x09\xb1\x88\xed\xc8\x9e\x20\x6d\xab\xfe\x77\x6c\x27\xbb\x01\x81\x44\x6e\x1e\xcf\x9b\xf9\xde\x8b\x3b\xb5\x79\x54\x0f\x08\x5b\x45\xc8\x98\x36\x9d\xf3\x04\x9c\x15\x25\x69\x83\x25\x13\x8c\x3d\x29\x9f\x0a\xe9\x7c\x69\xdb\xdd\xca\x10\x0c\xdf\x12\xca\xcf\xe7\xd5\xd9\x97\xea\xec\x5c\x2e\x16\xe5\xab\x96\x1b\xbd\x79\xc4\x6d\x6c\xb9\x2f\xef\xe1\x18\x5e\x8a\x8f\x53\x2d\x0d\x3e\x3d\x85\x9b\xb1\x0e\x1e\x3b\x8f\x01\x2d\xc1\xd5\xd7\x8b\x9f\xb9\xff\xc4\xa5\x0b\xda\x75\x28\x73\x6b\x83\x50\x76\xca\x93\x56\xed\x49\x86\x03\xeb\x48\x91\x76\x16\x5c\x0d\x57\xab\x6f\xf3\xf9\x7c\x31\x03\xab\x0c\x46\x5d\xd3\x54\xc6\x54\x21\xdc\xca\xba\x96\x52\xde\xe5\x19\xdf\x1d\x86\xa4\x82\xd0\x77\xd9\x68\x72\x0d\xce\xe7\x7d\xf0\xd7\xd9\xb8\xb4\xae\x03\xd2\x61\xb4\x64\x09\x60\xe2\x4c\x8d\x32\x9d\x32\xfe\x85\xf2\xa1\x51\xed\x8f\xeb\xcb\x5f\xe0\x9e\xd0\x7b\xbd\x45\x30\x53\x91\xd5\xbd\xdd\x00\x27\x07\x47\xfb\x09\xe2\xa5\x88\x0b\xe0\xb7\x77\xeb\x1d\xe1\x0c\xa2\xda\x79\x01\xff\x58\xe1\x91\x7a\x6f\x61\xb8\xe0\x87\x8d\xfc\x88\x9c\x90\x2b\xe7\x8d\x22\xfe\x26\x6a\x21\xa2\x75\xdd\xb2\xff\x19\xec\x8f\x35\xef\xa1\xf5\xf6\x23\xb8\x57\x42\xbe\x1e\x21\xc4\x40\x97\xe0\x28\x64\x54\xa8\x96\x43\x16\xbf\x63\x3b\xbe\xc5\x99\x41\x20\xaf\xed\x03\x5f\x0b\xc1\x0a\x5d\x67\xcd\xa7\x65\x42\x4c\x53\xf6\x1e\x63\x95\x15\x11\xb9\x88\xde\xe2\x63\xd9\x73\x70\x0a\xe2\x90\xc3\xe4\xea\x3a\x8f\x84\xa1\x1e\xc6\x0d\xd3\xd3\xc9\x3f\xec\x5d\x57\x83\x30\xa6\x3d\x4a\xa6\x90\x3f\x4c\x57\xc4\xdd\xcf\x01\x00\x00\xff\xff\x87\x02\xb2\xbe\x24\x03\x00\x00")

func time_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_time_onlyGo,
		"time_only.go",
	)
}

func time_onlyGo() (*asset, error) {
	bytes, err := time_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "time_only.go", size: 804, mode: os.FileMode(420), modTime: time.Unix(1462763802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"date_only.go": date_onlyGo,
	"datetime.go": datetimeGo,
	"datetime_only.go": datetime_onlyGo,
	"datetime_rfc2616.go": datetime_rfc2616Go,
	"time_only.go": time_onlyGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"date_only.go": &bintree{date_onlyGo, map[string]*bintree{}},
	"datetime.go": &bintree{datetimeGo, map[string]*bintree{}},
	"datetime_only.go": &bintree{datetime_onlyGo, map[string]*bintree{}},
	"datetime_rfc2616.go": &bintree{datetime_rfc2616Go, map[string]*bintree{}},
	"time_only.go": &bintree{time_onlyGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

