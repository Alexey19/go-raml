package theclient

import (
	"encoding/json"
	"fmt"
	"net/http"
)

const (
	defaultBaseURI = "http://localhost:8080"
)

type StructAPITest struct {
	client     http.Client
	AuthHeader string // Authorization header, will be sent on each request if not empty
	BaseURI    string
}

func NewStructAPITest() *StructAPITest {
	c := &StructAPITest{
		BaseURI: defaultBaseURI,
		client:  http.Client{},
	}
	return c
}

// get users.
// This method will be return list user.
// Use it wisely.
func (c *StructAPITest) GetUsers(headers, queryParams map[string]interface{}) (UsersGetRespBody, *http.Response, error) {
	var u UsersGetRespBody

	// create request object
	req, err := http.NewRequest("GET", c.BaseURI+"/users", nil)
	if err != nil {
		return u, nil, err
	}
	req.URL.RawQuery = buildQueryString(req, queryParams)

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	resp, err := c.client.Do(req)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

// create users
func (c *StructAPITest) UsersPost(city City, headers, queryParams map[string]interface{}) (City, *http.Response, error) {
	var u City

	resp, err := c.doReqWithBody("POST", c.BaseURI+"/users", &city, headers, queryParams)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

func (c *StructAPITest) OptionsUsers(headers, queryParams map[string]interface{}) (*http.Response, error) {

	resp, err := c.doReqWithBody("OPTIONS", c.BaseURI+"/users", nil, headers, queryParams)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return resp, nil
}

// get id
func (c *StructAPITest) GetUserByID(userId string, headers, queryParams map[string]interface{}) (City, *http.Response, error) {
	var u City

	// create request object
	req, err := http.NewRequest("GET", c.BaseURI+"/users/"+userId, nil)
	if err != nil {
		return u, nil, err
	}
	req.URL.RawQuery = buildQueryString(req, queryParams)

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	resp, err := c.client.Do(req)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

func (c *StructAPITest) UsersUserIdDelete(userId string, headers, queryParams map[string]interface{}) (*http.Response, error) {
	// create request object
	req, err := http.NewRequest("DELETE", c.BaseURI+"/users/"+userId, nil)
	if err != nil {
		return nil, err
	}
	req.URL.RawQuery = buildQueryString(req, queryParams)

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	return c.client.Do(req)
}

func (c *StructAPITest) UsersUserIdAddressPost(userId string, usersuseridaddresspostreqbody UsersUserIdAddressPostReqBody, headers, queryParams map[string]interface{}) (UsersUserIdAddressPostRespBody, *http.Response, error) {
	var u UsersUserIdAddressPostRespBody

	resp, err := c.doReqWithBody("POST", c.BaseURI+"/users/"+userId+"/address", &usersuseridaddresspostreqbody, headers, queryParams)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

// get address id
func (c *StructAPITest) UsersUserIdAddressFolderaddressIdtestaddressId2Get(addressId, addressId2, userId string, headers, queryParams map[string]interface{}) ([]address, *http.Response, error) {
	var u []address

	// create request object
	req, err := http.NewRequest("GET", c.BaseURI+"/users/"+userId+"/address/folder"+addressId+"test"+addressId2, nil)
	if err != nil {
		return u, nil, err
	}
	req.URL.RawQuery = buildQueryString(req, queryParams)

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	resp, err := c.client.Do(req)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}
