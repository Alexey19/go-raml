package theclient

import (
	"encoding/json"
	"fmt"
	"net/http"

	"examples.com/client/libraries/file_type"
	"examples.com/client/libraries/files"
)

const (
	rootURL = ""
)

type ExampleAPI struct {
	client     http.Client
	AuthHeader string // Authorization header, will be sent on each request if not empty
}

func NewExampleAPI() *ExampleAPI {
	c := new(ExampleAPI)
	c.client = http.Client{}
	return c
}

// get config files
func (c *ExampleAPI) ConfigsGet(headers, queryParams map[string]interface{}) (file_type.File, *http.Response, error) {
	qsParam := buildQueryString(queryParams)
	var u file_type.File

	// create request object
	req, err := http.NewRequest("GET", rootURL+"/configs"+qsParam, nil)
	if err != nil {
		return u, nil, err
	}

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	resp, err := c.client.Do(req)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

func (c *ExampleAPI) ConfigsPost(headers, queryParams map[string]interface{}) (Place, *http.Response, error) {
	qsParam := buildQueryString(queryParams)
	var u Place

	resp, err := c.doReqWithBody("POST", rootURL+"/configs", nil, headers, qsParam)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}

func (c *ExampleAPI) ConfigsPut(headers, queryParams map[string]interface{}) (*http.Response, error) {
	qsParam := buildQueryString(queryParams)

	resp, err := c.doReqWithBody("PUT", rootURL+"/configs", nil, headers, qsParam)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return resp, nil
}

func (c *ExampleAPI) DirsGet(headers, queryParams map[string]interface{}) (files.Directory, *http.Response, error) {
	qsParam := buildQueryString(queryParams)
	var u files.Directory

	// create request object
	req, err := http.NewRequest("GET", rootURL+"/dirs"+qsParam, nil)
	if err != nil {
		return u, nil, err
	}

	if c.AuthHeader != "" {
		req.Header.Set("Authorization", c.AuthHeader)
	}

	for k, v := range headers {
		req.Header.Set(k, fmt.Sprintf("%v", v))
	}

	//do the request
	resp, err := c.client.Do(req)
	if err != nil {
		return u, nil, err
	}
	defer resp.Body.Close()

	return u, resp, json.NewDecoder(resp.Body).Decode(&u)
}
