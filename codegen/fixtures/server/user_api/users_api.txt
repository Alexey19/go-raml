package main

import (
	"encoding/json"
	"net/http"
)

// UsersAPI is API implementation of /users root endpoint
type UsersAPI struct {
}

// Get is the handler for GET /users
// Get a list of test
func (api UsersAPI) Get(w http.ResponseWriter, r *http.Request) { // name := req.FormValue("name")
	var respBody UsersGetRespBody
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// Post is the handler for POST /users
// create users
func (api UsersAPI) Post(w http.ResponseWriter, r *http.Request) {
	var reqBody User

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
	var respBody User
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// userIdGet is the handler for GET /users/{userId}
// get id
func (api UsersAPI) userIdGet(w http.ResponseWriter, r *http.Request) {
	var respBody User
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// userIdDelete is the handler for DELETE /users/{userId}
func (api UsersAPI) userIdDelete(w http.ResponseWriter, r *http.Request) {
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// getUserAddressByID is the handler for GET /users/{userId}/address/{addressId}
// get address id
func (api UsersAPI) getUserAddressByID(w http.ResponseWriter, r *http.Request) {
	var respBody Address
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}
