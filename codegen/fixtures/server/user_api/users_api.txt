package users

import (
	"encoding/json"
	"examples.com/ramlcode/types"
	"net/http"
)

// UsersAPI is API implementation of /users root endpoint
type UsersAPI struct {
}

// GetUserAddressByID is the handler for GET /users/{userId}/address/{addressId}
// get address id
func (api UsersAPI) GetUserAddressByID(w http.ResponseWriter, r *http.Request) {
	var respBody types.Address
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}

// UserIdDelete is the handler for DELETE /users/{userId}
func (api UsersAPI) UserIdDelete(w http.ResponseWriter, r *http.Request) {
}

// UserIdGet is the handler for GET /users/{userId}
// get id
func (api UsersAPI) UserIdGet(w http.ResponseWriter, r *http.Request) {
	var respBody types.User
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}

// Get is the handler for GET /users
// Get a list of test
func (api UsersAPI) Get(w http.ResponseWriter, r *http.Request) { // name := req.FormValue("name")
	var respBody types.UsersGetRespBody
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}

// Post is the handler for POST /users
// create users
func (api UsersAPI) Post(w http.ResponseWriter, r *http.Request) {
	var reqBody types.User

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
	var respBody types.User
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}
