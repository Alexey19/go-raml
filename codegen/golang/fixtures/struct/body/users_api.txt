package users

import (
	"encoding/json"
	"examples.com/types"
	"net/http"
)

// UsersAPI is API implementation of /users root endpoint
type UsersAPI struct {
}

// IdGet is the handler for GET /users/{id}
// get id of users.
// This method will be return single user object.
// Replace ID with user defined field.
func (api UsersAPI) IdGet(w http.ResponseWriter, r *http.Request) {
	var respBody types.UsersIdGetRespBody
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}

// IdPut is the handler for PUT /users/{id}
func (api UsersAPI) IdPut(w http.ResponseWriter, r *http.Request) {
	var reqBody types.Catanimal

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
	var respBody types.UnionCatanimal
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(&respBody)
}

// Post is the handler for POST /users
// create a user
func (api UsersAPI) Post(w http.ResponseWriter, r *http.Request) {
	var reqBody types.UsersPostReqBody

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
}
