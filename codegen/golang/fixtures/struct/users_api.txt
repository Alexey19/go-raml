package main

import (
	"encoding/json"
	"net/http"
)

// UsersAPI is API implementation of /users root endpoint
type UsersAPI struct {
}

// Post is the handler for POST /users
// create a user
func (api UsersAPI) Post(w http.ResponseWriter, r *http.Request) {
	var reqBody UsersPostReqBody

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// idGet is the handler for GET /users/{id}
// get id of users.
// This method will be return single user object.
// Replace ID with user defined field.
func (api UsersAPI) idGet(w http.ResponseWriter, r *http.Request) {
	var respBody UsersIdGetRespBody
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}

// idPut is the handler for PUT /users/{id}
func (api UsersAPI) idPut(w http.ResponseWriter, r *http.Request) {
	var reqBody Catanimal

	// decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

	// validate request
	if err := reqBody.Validate(); err != nil {
		w.WriteHeader(400)
		w.Write([]byte(`{"error":"` + err.Error() + `"}`))
		return
	}
	var respBody Catanimal
	json.NewEncoder(w).Encode(&respBody)
	// uncomment below line to add header
	// w.Header().Set("key","value")
}
