{{- define "client_python_aiohttp" -}}
import json
import aiohttp
{{ range $k, $v := .Services }}
from .{{$v.FilenameNoExt}} import  {{$v.Name}} {{end}}


class Client:
    def __init__(self, loop, base_uri = "{{.BaseURI}}"):
        self.base_url = base_uri
        self.session = aiohttp.ClientSession(loop=loop)
        self.headers = {"Content-Type": "application/json"}
        {{ range $k, $v := .Services }}
        self.{{$v.EndpointName}} = {{$v.Name}}(self){{end}}
    
    def set_auth_header(self, val):
        ''' set authorization header value'''
        self.headers["Authorization"] = val

    def close(self):
        self.session.close()

    def build_header(self, headers):
        hdrs = self.headers
        if headers is None:
            return hdrs

        for key in headers:
            hdrs[key] = headers[key]
        return hdrs
    
    async def get(self, uri, headers, params, content_type):
        res = await self.session.get(uri, headers=self.build_header(headers), params=params)
        res.raise_for_status()
        return res

    async def post(self, uri, data, headers, params, content_type):
        hdrs = self.build_header(headers)
        if type(data) is not str:
            data = json.dumps(data)

        res = await self.session.post(uri, data=data, headers=hdrs, params=params)
        res.raise_for_status()
        return res

    async def put(self, uri, data, headers, params, content_type):
        hdrs = self.build_header(headers)
        if type(data) is not str:
            data = json.dumps(data)

        res = await self.session.put(uri, data=data, headers=hdrs, params=params)
        res.raise_for_status()
        return res

    async def patch(self, uri, data, headers, params, content_type):
        hdrs = self.build_header(headers)
        if type(data) is not str:
            data = json.dumps(data)
        
        res = await self.session.patch(uri, data=data, headers=hdrs, params=params)
        res.raise_for_status()
        return res
{{- end -}}
