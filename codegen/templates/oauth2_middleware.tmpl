{{- define "oauth2_middleware" -}}
package {{.PackageName}}

import (
	"net/http"
)

// Oauth2{{.Name}}Middleware is oauth2 middleware for {{.Name}}
type Oauth2{{.Name}}Middleware struct {
	describedBy string
	field       string
	scopes      []string
}

// NewOauth2{{.Name}}Middlewarecreate new Oauth2{{.Name}}Middleware struct
func NewOauth2{{.Name}}Middleware(scopes []string) *Oauth2{{.Name}}Middleware {
    om := Oauth2{{.Name}}Middleware{
		scopes:      scopes,
	}
    {{ if .Header}}
    om.describedBy = "headers"
    om.field = "{{.Header.Name}}"
    {{ else if .QueryParams }}
    om.describedBy = "queryParameters"
    om.field = "{{.QueryParams.Name}}"
    {{ end }}
    return &om
}

// CheckScopes checks whether user has needed scopes
func (om *Oauth2{{.Name}}Middleware) CheckScopes(scopes []string) bool {
	if len(om.scopes) == 0 {
		return true
	}

	for _, allowed := range om.scopes {
		for _, scope := range scopes {
			if scope == allowed {
				return true
			}
		}
	}
	return false
}

// Handler return HTTP handler representation of this middleware
func (om *Oauth2{{.Name}}Middleware) Handler(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var accessToken string

		// access token checking
		if om.describedBy == "queryParameters" {
			accessToken = r.URL.Query().Get(om.field)
		} else if om.describedBy == "headers" {
			accessToken = r.Header.Get(om.field)
		}
		if accessToken == "" {
			w.WriteHeader(401)
			return
		}

		// WRITE codes to check user's scopes
		var scopes []string

		// check scopes
		if !om.CheckScopes(scopes) {
			w.WriteHeader(403)
			return
		}

		next.ServeHTTP(w, r)
	})
}
{{- end -}}
