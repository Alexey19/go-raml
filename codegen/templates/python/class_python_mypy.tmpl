{{- define "class_python_mypy" -}}
"""
Auto-generated class for {{.Name}}
"""
import capnp
import os
{{range $k, $v := .Imports -}}
{{$v}}
{{end}}
from . import client_support

dir = os.path.dirname(os.path.realpath(__file__))


class {{.Name}}(object):
    """
    auto-generated. don't touch.
    """

    def __init__(self, {{.CreateParamString}}) -> None:
        """
        {{ range $key, $val := .Fields -}}
        :type {{$val.Name}}: {{if $val.IsList}}list[{{$val.DataType}}]{{else}}{{$val.DataType}}{{end}}
        {{ end -}}
        :rtype: {{.Name}}
        """

        {{- range $key, $val := .Fields}}
        self.{{$val.Name}} = {{$val.Name}}  # type: {{ $val.MyPyType }}

        {{- end }}

    def to_capnp(self):
        template = capnp.load('%s/{{.Name}}.capnp' % dir)
        return template.{{.Name}}.new_message(**self.as_dict()).to_bytes()

    def as_dict(self):
        return client_support.to_dict(self)


class {{.Name}}Collection(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def new(bin=None) -> {{.Name}}:
        template = capnp.load('%s/{{.Name}}.capnp' % dir)
        struct = template.{{.Name}}.from_bytes(bin) if bin else template.{{.Name}}.new_message()
        return {{.Name}}(**struct.to_dict(verbose=True))

{{end -}}
