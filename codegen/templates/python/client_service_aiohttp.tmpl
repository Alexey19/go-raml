{{- define "client_service_aiohttp" -}}
# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

{{- range $k, $v := .Imports}}
{{ $v }}
{{- end}}
{{ $UnmarshallResponse := .UnmarshallResponse}}

class {{.Name}}:
    def __init__(self, client):
        self.client = client

{{ range $k, $v := .Methods }}

    async def {{$v.MethodName}}({{$v.Params}}):
        """{{ range $kf, $vf := $v.FuncComments }}
        {{$vf}}{{end}}
        It is method for {{$v.Verb}} {{$v.Endpoint}}
        """
        uri = self.client.base_url + {{$v.ResourcePath}}
        {{- if (and $v.HasRespBody $UnmarshallResponse ) }}
        resp = await self.client.{{$v.Verb | ToLower }}({{$v.PRArgs}})
        try:
        {{- range $k, $rbt := $v.SuccessRespBodyTypes }}
            if resp.status_code == {{$rbt.Code}}:
            {{- if $rbt.IsArray}}
                resps = []
                for elem in resp.json():
                    resps.append({{$rbt.BasicType}}(elem))
                return APIResponse(data=resps, response=resp)
            {{- else}}
                return APIResponse(data={{$rbt.BasicType}}(await resp.json()), response=resp)
            {{- end}}
        {{- end }}
        except ValueError as msg:
            raise UnmarshallError(resp, msg)
        except Exception as e:
            raise UnmarshallError(resp, e.message)
        {{- else }}
        return await self.client.{{$v.Verb | ToLower }}({{$v.PRArgs}})
        {{- end}}
{{ end -}}
{{- end -}}
