{{- define "resource_python_template" -}}
{{- $apiName := .Name -}}
import json as JSON
import jsonschema
from jsonschema import Draft4Validator
from flask import Blueprint, jsonify, request
{{ range $k, $v := .MiddlewaresArr}}
import {{$v.ImportPath}} as {{$v.Name}}{{ end }}

import os
dir_path = os.path.dirname(os.path.realpath(__file__))
{{ range $k, $v := .ReqBodies }}
{{$v}}_schema =  JSON.load(open(dir_path + '/schema/{{$v}}_schema.json'))
{{$v}}_schema_resolver = jsonschema.RefResolver('file://' + dir_path + '/schema/', {{$v}}_schema)
{{$v}}_schema_validator = Draft4Validator({{$v}}_schema, resolver={{$v}}_schema_resolver)
{{ end }}

{{.Name | ToLower }}_api = Blueprint('{{.Name | ToLower}}_api', __name__)
{{ range $k, $v := .Methods }}

@{{$apiName | ToLower}}_api.route('{{$v.Endpoint}}', methods=['{{$v.Verb}}'])
{{range $km, $vm := $v.MiddlewaresArr -}}
@{{$vm.Name}}.{{$vm.Name}}([{{$vm.Args}}])
{{end -}}
def {{$v.MethodName}}({{$v.Params}}):
    '''
    {{range $kf, $vf := $v.FuncComments -}}
    {{$vf}}
    {{end -}}
    It is handler for {{$v.Verb}} {{$v.Endpoint}}
    '''
    {{ if .ReqBody }}
    inputs = request.get_json()
    try:
        {{.ReqBody}}_schema_validator.validate(inputs)
    except jsonschema.ValidationError as e:
        return jsonify(errors="bad request body"), 400
    {{ end }}
    return jsonify()
{{ end -}}

{{end -}}
