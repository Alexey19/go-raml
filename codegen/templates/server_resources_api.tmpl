{{- define "resource_api_template" -}}
package {{.PackageName}}

import (
    {{ range $k, $v := .APILibImportPaths -}}
        "{{$v}}"
    {{ end -}}
)
{{$apiName := .Name}}
// {{.Name}}API is API implementation of {{.Endpoint}} root endpoint
type {{.Name}}API struct {
}


{{ range $k, $v := .Methods }}
// {{$v.MethodName}} is the handler for {{$v.Verb}} {{$v.Endpoint}}
{{- range $kf, $vf := $v.FuncComments}}
// {{$vf}}{{end}}
func(api {{$apiName}}API) {{$v.MethodName}}(w http.ResponseWriter, r *http.Request) {
	{{- range $kq, $vq := $v.QueryParameters -}}
    // {{$kq}} := req.FormValue("{{$kq}}")
	{{- end }}
	{{- if .ReqBody -}}
	var reqBody {{.ReqBody}}

    // decode request
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		w.WriteHeader(400)
		return
	}

    // validate request
    if err := reqBody.Validate(); err != nil {
        w.WriteHeader(400)
        w.Write([]byte(`{"error":"`+err.Error()+`"}`))
        return
    }
	{{- end }}

	{{- if .RespBody }}
	var respBody {{.RespBody}}
	json.NewEncoder(w).Encode(&respBody);
	{{- end }}
	// uncomment below line to add header
	// w.Header().Set("key","value")
}
{{- end -}}

{{- end -}}
