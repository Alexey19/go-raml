// Code generated by go-bindata.
// sources:
// templates/client_helper_resource.tmpl
// templates/client_resource.tmpl
// templates/generic_main.tmpl
// templates/python_client.tmpl
// templates/server_main.tmpl
// templates/server_resources_api.tmpl
// templates/server_resources_interface.tmpl
// templates/struct.tmpl
// DO NOT EDIT!

package commands

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClient_helper_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x31\x8f\xdb\x30\x0c\x85\x67\xeb\x57\xb0\x9e\xec\xc2\xb0\xf7\x02\x59\xda\xae\xed\x90\x0e\x1d\x03\xc5\x7a\x8e\xd5\x3a\x92\x43\xd1\x38\x04\x86\xff\xfb\x49\x4a\x2e\xc0\x65\xca\x62\x88\xe4\x23\xf9\x3e\xc2\xeb\x6a\x30\x58\x07\x2a\xfb\xc9\xc2\xc9\x61\xc4\x34\x83\x0f\x8c\xe0\x17\xee\x11\xca\x6d\x53\xb3\xee\xff\xeb\x13\xe8\x26\x51\xca\x9e\x67\xcf\x42\x95\x2a\xca\xe3\x55\xa2\x26\x3e\xe0\x7a\x6f\xac\x3b\x75\xff\x82\x77\x29\x61\x7d\xfa\x3a\x48\x37\x8a\xcc\xa5\xaa\x95\x1a\x16\xd7\x53\x16\xe2\xbb\x37\xd7\xca\x68\xd1\x64\x9d\x80\x07\xdd\x63\xdd\x6a\xaa\xac\x6f\xf7\xd0\x06\xdc\x10\x98\x3d\xd7\xb4\xaa\xe2\x98\x03\xfa\xb6\xa3\x34\xbc\xfd\xa5\x39\x8c\x7a\xca\xed\xb5\x2a\xec\x90\xab\x5f\x76\xe4\xec\x94\xe4\x05\x43\x16\x76\x29\xcc\x8d\xaa\xd8\xd4\x47\x2e\xfb\x6d\x7f\xe3\xed\xb6\xa5\x3a\xd6\x4d\xd2\xa9\xed\xee\xce\xf8\x3d\x2e\x7f\xad\x8c\xd9\xe0\x19\x32\x7a\xd3\xd0\xc2\xd3\x1f\x61\x0a\xc2\x91\xb0\xa1\x67\xdf\xcd\xfd\x32\x94\x48\xdb\x1f\xf9\x1d\x59\xbe\xe6\x70\x8f\x30\x7b\x17\xf0\x09\x28\x0e\x7f\x30\x3d\x1d\xe4\x55\x22\x55\x74\x1d\xf5\x0c\x2d\x20\x19\x41\x8c\xcb\x82\x20\x89\xf4\xf2\x98\x9d\x1d\x64\xda\x5c\x7c\x02\x6a\x28\x19\x79\x7d\xe1\x3d\x79\x83\x6d\x7f\xfa\x2a\xae\xaa\xe3\xe9\xd6\x15\xce\xc4\xff\xe4\x3d\x00\x00\xff\xff\xe3\x31\x05\x57\x4d\x02\x00\x00")

func templatesClient_helper_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesClient_helper_resourceTmpl,
		"templates/client_helper_resource.tmpl",
	)
}

func templatesClient_helper_resourceTmpl() (*asset, error) {
	bytes, err := templatesClient_helper_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client_helper_resource.tmpl", size: 589, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesClient_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xc1\x6e\xdb\x30\x0c\x3d\x5b\x5f\xc1\x19\xc1\x60\x77\x81\x73\x1f\x90\x4b\x97\x60\x18\x90\x15\x45\x90\x6e\xc7\xc1\xb5\x99\xc6\x6d\x22\x39\xb2\x9c\xa0\xd0\xfc\xef\x23\x25\xdb\x71\xd3\xb5\xc0\x0a\x6c\xa7\xf5\xa4\x52\x24\xdf\x7b\xe4\x93\x63\x6d\x8e\xeb\x42\x22\x84\xd9\xb6\x40\x69\x7e\x68\xac\x54\xad\x33\x0c\x9b\x46\x94\x69\xf6\x90\xde\x21\xf8\x2b\x21\x8a\x5d\xa9\xb4\x81\x48\x04\xa1\x44\x33\xd9\x18\x53\x86\x22\x08\x42\x94\x99\xca\x0b\x79\x37\xb9\xaf\x94\x0c\x45\x2c\x44\xa6\x64\xe5\x12\xb5\x52\xe6\x66\xb9\x80\x29\x84\xd6\x26\x97\x69\x85\x37\xcb\x2f\x4d\xe3\x92\xac\x1d\xa5\x65\x71\x95\xee\x10\x3e\x4e\x21\xe1\x03\x81\x9a\xc7\x12\x81\x72\xfd\xbf\x50\x19\x5d\x67\x06\xac\x08\x3c\x0b\x60\xd4\xe4\x93\x67\xd4\x08\xb1\xae\x65\x06\x57\x78\xec\x2b\xa2\x18\x2e\x4e\xe5\x5c\xc7\xdd\x25\x1e\xa3\x3e\x1a\x53\x30\x69\xdb\x4d\x87\x0d\x6d\x43\x8c\xd1\xd4\x5a\x42\xc6\xcd\xad\x05\x9d\x4a\x9a\xc0\xe8\x61\x0c\xa3\x83\xa3\xf9\x15\xcd\x46\xe5\x15\x10\x55\xc6\x8e\x32\x86\xeb\x84\x50\x6f\xe2\x3e\x3a\xb4\x59\x2d\xa3\x41\xe4\x3a\xd5\xe9\x8e\xb2\x7c\x6c\x89\x55\x79\xa9\xf2\x47\x26\x6a\x8b\x35\xb1\x84\x41\x14\xc2\x90\x50\xc6\x74\x85\x32\x6f\x9a\x0b\x47\x94\x2f\x69\xb8\x38\x46\xad\x95\x8e\x59\xa0\x2b\xc5\x3d\x97\x7e\x43\x7d\x0b\xe1\xe7\xf9\x8a\xd7\x17\x04\x2f\x36\x85\x43\xaa\xa1\x86\xe7\x24\x1c\x92\xa0\xd2\xc9\x04\x32\x8d\xa9\x41\xd0\xb8\xaf\x91\xb6\xa9\x6e\xef\x31\x33\x74\x45\x81\x31\x10\x3c\x8f\xc3\x71\xa2\xf1\x2f\x7d\x52\xe4\xb0\xc7\xd0\xad\xfd\x29\x01\x67\xac\xeb\xd4\x6c\x5a\x12\x1f\x3a\xc0\x9e\x48\x9f\xc1\xba\x65\xb1\xa5\x4d\x05\x2c\x8e\xc0\xde\x4d\x39\xc0\x7a\x5f\xd3\xd5\x6e\xaf\x76\xd5\x8e\xa5\xcf\xc7\x6d\x85\xa7\xeb\xb3\x3b\xa7\x39\x08\x5a\xdd\xb9\x02\xb3\xe9\x65\x3b\xbd\x55\xd9\x0b\xee\x8c\x93\xcc\x54\x44\x29\xff\x98\x60\x10\xd0\x73\x45\x0d\x4c\x29\xe1\xae\x64\x5c\x55\x61\x14\x8b\xd7\xb6\xcd\x5d\x4e\xb8\x5e\x0e\x3f\x55\x5e\xdc\x0c\xe9\xed\xa2\x8e\xfa\x8e\x71\xe2\x43\xd1\xfb\x3a\x16\x27\x66\x83\x1e\xbe\x01\x51\x14\x27\x72\xa2\x4d\x84\x33\x2b\xce\xe6\x8b\xf9\x6a\xee\xdd\xf8\x56\x4b\xb5\x3d\x7a\x57\xfd\x25\x53\x3d\x1f\xfd\xcb\x86\xf0\x9f\x88\x73\x2b\x88\xe1\xb4\xde\xfe\xf6\x80\xfe\x9e\x78\x2e\x57\x34\x8b\xef\x85\xd9\x70\x6a\x14\xba\x4a\x1e\x2f\x7d\x47\xff\x74\x28\xbf\x9d\x49\x1b\xdc\x3b\x8e\x3f\x61\xa5\x16\xea\x88\x9a\x6f\x3a\x89\xff\x6d\xde\x92\xeb\x0e\x0d\xff\x36\xd0\x91\x61\x07\xc7\x5f\x01\x00\x00\xff\xff\xfd\x10\xb5\x98\x4f\x07\x00\x00")

func templatesClient_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesClient_resourceTmpl,
		"templates/client_resource.tmpl",
	)
}

func templatesClient_resourceTmpl() (*asset, error) {
	bytes, err := templatesClient_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client_resource.tmpl", size: 1871, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGeneric_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4f\xcd\x4b\x2d\xca\x4c\x8e\xcf\x4d\xcc\xcc\x8b\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x00\x49\x70\x71\xa5\x95\xe6\x25\x83\x99\x1a\x9a\xd5\x5c\x5c\xb5\x5c\xd5\xd5\xa9\x79\x29\x40\x55\x80\x00\x00\x00\xff\xff\xdc\x57\x73\x81\x49\x00\x00\x00")

func templatesGeneric_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGeneric_mainTmpl,
		"templates/generic_main.tmpl",
	)
}

func templatesGeneric_mainTmpl() (*asset, error) {
	bytes, err := templatesGeneric_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/generic_main.tmpl", size: 73, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPython_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\xcf\x6a\xc3\x30\x0c\x87\xcf\xf1\x53\x88\x90\x43\xcb\x8a\x1f\xa0\xd0\x43\x3b\x76\x18\x6c\xa3\x74\x7f\xae\xc6\x6b\xd4\xce\xcc\x71\x32\xd9\xe9\x18\x9e\xdf\x7d\xb2\xc3\x52\x1d\x8c\xfd\x93\xf9\xf4\x29\x46\x68\xf1\x64\x1c\x42\x3d\xfc\x84\x8f\xde\xa9\xa3\x35\xe8\x82\x0a\xd8\x0d\x56\x07\xac\x21\x25\x61\xba\xa1\xa7\x00\x84\x5f\x23\xfa\xe0\x85\xd8\x6d\x9f\xef\xd4\xeb\xe1\x1e\x36\x50\xc7\x28\x77\xda\x23\xbf\x52\xaa\x85\x38\x5a\xed\x3d\xdc\x16\xca\x5a\x00\x17\x0f\x00\xa5\x8c\x33\x41\xa9\x85\x47\x7b\x5a\x8d\x64\x97\x53\x2f\x57\x8e\x24\x47\x0c\xfb\xe7\x0a\xc1\x62\xa4\xdd\x19\xa1\xf9\x5c\x41\x73\x81\xf5\x06\xe4\xbe\x18\x3e\x22\x9f\xad\xcf\x5e\xa2\xca\xec\x18\x9b\x8b\x9c\xd2\x27\xdd\x61\x4a\x8b\x92\xec\x35\xe9\xce\xa7\xc4\x93\xaa\x6a\x24\xc3\xf8\x92\x33\x7e\x4b\x67\x6e\x70\x4c\x18\x46\x72\xf3\x62\xb2\x7c\x78\x43\x7a\x87\x5f\x78\xe9\x1f\xfa\x6f\x24\xc6\xcd\x82\x37\xc0\x9c\x09\x7e\x98\x18\xcb\x2c\x8a\xae\x2d\x36\xd7\xeb\x5f\x00\x00\x00\xff\xff\x23\x1c\xfe\x41\x57\x01\x00\x00")

func templatesPython_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPython_clientTmpl,
		"templates/python_client.tmpl",
	)
}

func templatesPython_clientTmpl() (*asset, error) {
	bytes, err := templatesPython_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/python_client.tmpl", size: 343, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServer_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\xc1\x6a\xeb\x30\x10\x45\xd7\xd6\x57\x0c\x22\x0b\x19\x82\x92\x65\x08\xbc\x45\xe0\x6d\x02\x25\x84\xf4\x03\x82\x6a\x8f\x1d\x11\x6b\x64\x46\xe3\xb4\x20\xfc\xef\x95\x5d\x68\x57\x42\xba\x67\x8e\xe6\xe6\xdc\x62\xe7\x09\x41\x27\xe4\x17\xf2\x3d\x38\x4f\x77\xc1\x30\x0e\x4e\x50\xcf\xb3\x1a\x5d\xf3\x74\x3d\xc2\x12\x28\xe5\xc3\x18\x59\xc0\xa8\x4a\x0f\xb1\xd7\xe5\x20\x94\xdd\x43\x64\xd4\xaa\x5c\x7a\x2f\x8f\xe9\xc3\x36\x31\xec\xfa\xc8\x7e\x18\xdc\x2e\x4c\x5f\x5a\xd5\x4a\x75\x13\x35\xab\xc4\xd4\x90\x55\xc5\x70\xfc\x07\x25\xb3\x17\xfc\xbc\xc5\x49\x90\x4d\x81\xaa\x9c\x81\x1d\x95\xef\x36\xcf\x2d\x6c\x5e\x0b\x64\x6f\x98\xe2\xc4\x0d\xa6\xff\xd8\x41\xd9\xa8\x40\xf6\xe2\x02\xce\xf3\x99\xca\x5c\xe7\x1a\x5c\x0d\xc9\xf0\x16\x7e\xb3\xd3\xf5\x9c\xe7\x7a\x35\x22\xb5\xcb\x9c\xaa\xca\xca\xf6\xca\x9e\x64\x20\xa3\x93\x38\x16\x4f\x3d\xfc\x34\xd7\x85\x5d\x7a\xd8\x37\x9f\x04\xe9\x44\xed\xfb\xf2\x6e\xf4\xf1\xb0\x3f\xec\xf5\x16\xb8\x56\xc5\xf1\xa7\xfb\x0e\x00\x00\xff\xff\xf3\x14\x20\xaa\x3b\x01\x00\x00")

func templatesServer_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServer_mainTmpl,
		"templates/server_main.tmpl",
	)
}

func templatesServer_mainTmpl() (*asset, error) {
	bytes, err := templatesServer_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server_main.tmpl", size: 315, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServer_resources_apiTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\x41\x4f\x83\x40\x10\x85\xcf\xcc\xaf\x18\x49\x63\xc0\x34\xb4\x07\x4f\x36\x3d\x68\x34\x51\x13\xab\xd1\x83\xc7\x66\x03\xd3\x76\x6d\x59\x70\x58\x4a\x9a\x0d\xff\xdd\x59\xa0\xd2\xdb\xec\xdb\x79\x33\xdf\x3c\xe7\x32\xda\x68\x43\x18\x32\x55\x45\xcd\x29\xad\x55\xa9\xd7\x96\xf2\xf2\xa0\x2c\x85\x6d\x0b\xa5\x4a\xf7\x6a\x4b\x98\x2b\x6d\x00\x74\x5e\x16\x6c\x31\x82\xc0\x39\xd4\x1b\x4c\x56\x44\xd9\xeb\xd7\xfb\x0a\xdb\x36\x24\x93\x16\x99\x36\xdb\xd9\x4f\x55\x98\x50\x1a\xc8\x64\xa2\x43\x10\x1a\xb2\xb3\x9d\xb5\x65\x08\x31\x38\x37\x91\x1d\x2b\x95\x13\xde\x2d\x65\x80\x14\xd2\x63\x4f\x25\xa1\x73\xc3\xf3\xfe\xe3\x05\x2b\xcb\x75\x6a\xd1\x41\x0b\x20\x26\x64\x65\x04\x63\xb2\x9f\xe2\xe4\xd8\x39\xdf\xc8\xee\x8a\xac\x92\x0d\x08\x9b\xda\xa4\x91\x8c\xc5\x71\x7a\x37\x25\xf6\xc2\x71\x68\xed\xd5\xa8\x41\x8f\x92\x7c\x52\x55\x16\xa6\xa2\x6f\xd6\x96\x78\x8a\x8c\x37\x83\xfe\x5b\x53\x65\xc5\xe9\x8f\xf4\x37\x8a\xf2\x50\x64\x27\x7f\xc9\x51\x31\x72\xff\xf4\xb4\xe3\x0f\x04\xd2\x49\xcc\x9e\xcc\x9f\x2f\xc1\x34\x8f\x24\x79\x10\x47\x9c\xf8\xa6\x38\xe9\xdf\xd1\xf5\x30\x20\x5e\x74\x86\xab\x25\x1a\x7d\xf0\xdb\x82\x26\xe9\x60\x9e\x49\x79\xdb\xed\x7c\x1e\x8b\xc8\x64\x6b\x36\x10\xb4\x5d\xe6\x43\xa4\xff\xf9\xfb\x2b\x3a\x9a\x91\x6e\x10\x3a\xbc\xbe\xf6\x7f\x67\xa8\x27\xd3\x43\x35\x71\xd2\x97\xd1\xd9\x11\x2f\x2e\x37\xb4\x70\xb1\x6d\x2c\xff\x02\x00\x00\xff\xff\x2f\x49\xbb\x54\x32\x02\x00\x00")

func templatesServer_resources_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServer_resources_apiTmpl,
		"templates/server_resources_api.tmpl",
	)
}

func templatesServer_resources_apiTmpl() (*asset, error) {
	bytes, err := templatesServer_resources_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server_resources_api.tmpl", size: 562, mode: os.FileMode(420), modTime: time.Unix(1455154383, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServer_resources_interfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xbd\x4e\x03\x31\x10\x84\xeb\xec\x53\xac\xac\x14\x77\x51\xe4\xf4\x48\x94\x20\x28\xa0\x48\x01\x65\xe4\xdc\xed\x25\x56\xce\x3f\xd8\xeb\x08\x64\xf9\xdd\x31\xc7\x45\x48\x90\x82\x6e\x3d\x1e\x7d\x33\x93\x73\x4f\x83\xb6\x84\x22\x50\x74\x29\x74\xb4\xd3\xc3\x8e\xc9\xf8\x51\x31\x89\x52\xc0\xab\xee\xa4\x0e\x84\x46\x69\x0b\xa0\x8d\x77\x81\xb1\x81\x85\x38\x68\x3e\xa6\xbd\xec\x9c\xd9\x1c\x5c\xd0\xe3\xa8\x36\x26\xbd\x8b\xfa\x63\x89\x37\x47\x66\x2f\xa0\x05\xe0\x0f\x4f\x98\xb3\x7c\x56\x86\x4a\x79\xb4\x4c\x61\x50\x1d\xa1\xbe\x5c\x19\x16\x39\x63\x50\xb6\x86\x2c\x4f\x6b\x5c\x9e\xf1\xe6\x16\xe5\x13\xf1\xd1\xf5\x11\x4b\x41\x58\x54\xc7\xf2\x3c\x4b\xdf\xa0\xe6\x2b\x40\x6e\x29\x7a\x67\x23\xbd\x06\x5d\x69\x6b\x5c\xcd\xea\x5b\xa2\xc8\xed\x04\x26\xdb\x57\x06\x14\x80\x21\xd9\xee\x4a\x93\xad\x4b\x4c\xb1\x09\xb8\xaa\xf5\xe5\xf4\xaa\x24\x7d\xc5\xd9\x22\xfe\xab\x6c\x90\x0f\xca\xf6\x23\xdd\xd7\xc0\x46\x4c\xd5\xef\x6c\xef\x5d\x9d\x5c\x8a\xa8\x6c\xf9\x67\x4e\x7b\x41\xcc\xfe\x17\x0a\xfb\xea\xfd\x35\xe1\xe7\xfe\x0c\x00\x00\xff\xff\x9b\xdd\xc9\x37\xb8\x01\x00\x00")

func templatesServer_resources_interfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServer_resources_interfaceTmpl,
		"templates/server_resources_interface.tmpl",
	)
}

func templatesServer_resources_interfaceTmpl() (*asset, error) {
	bytes, err := templatesServer_resources_interfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server_resources_interface.tmpl", size: 440, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\xba\x94\x1c\xa0\xe0\xd6\xa5\xb8\x70\x6f\x87\x66\x94\xda\x34\x86\x26\x15\xca\x30\x77\x77\x62\xdb\xac\x7e\xfe\xe3\xfd\x61\xf6\xf4\x1c\x22\x81\xcd\x65\x5e\xfa\xf2\x28\x34\xa5\x80\x85\xac\x88\x49\xd8\x8f\xf8\x22\x60\x76\xb7\x2d\x5e\x71\x22\x05\xa6\xac\xa9\xd6\xe0\x6a\x01\x22\xb0\xd9\xc0\x06\xf4\x29\x98\x31\xaa\xd8\x8c\xb4\x9e\xa0\xf9\x62\x58\x08\xda\x33\xb8\xcb\x40\xc1\x67\x15\x98\x2b\x53\x51\xc3\x1f\xbb\xbb\x4e\xea\xbf\x7b\xe7\x4f\x6c\xed\xc1\x6d\xb7\x2f\x52\xf4\x7a\x58\xcc\x91\x7e\x01\x00\x00\xff\xff\x09\x6e\x22\xe8\xb9\x00\x00\x00")

func templatesStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructTmpl,
		"templates/struct.tmpl",
	)
}

func templatesStructTmpl() (*asset, error) {
	bytes, err := templatesStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/struct.tmpl", size: 185, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client_helper_resource.tmpl": templatesClient_helper_resourceTmpl,
	"templates/client_resource.tmpl": templatesClient_resourceTmpl,
	"templates/generic_main.tmpl": templatesGeneric_mainTmpl,
	"templates/python_client.tmpl": templatesPython_clientTmpl,
	"templates/server_main.tmpl": templatesServer_mainTmpl,
	"templates/server_resources_api.tmpl": templatesServer_resources_apiTmpl,
	"templates/server_resources_interface.tmpl": templatesServer_resources_interfaceTmpl,
	"templates/struct.tmpl": templatesStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client_helper_resource.tmpl": &bintree{templatesClient_helper_resourceTmpl, map[string]*bintree{}},
		"client_resource.tmpl": &bintree{templatesClient_resourceTmpl, map[string]*bintree{}},
		"generic_main.tmpl": &bintree{templatesGeneric_mainTmpl, map[string]*bintree{}},
		"python_client.tmpl": &bintree{templatesPython_clientTmpl, map[string]*bintree{}},
		"server_main.tmpl": &bintree{templatesServer_mainTmpl, map[string]*bintree{}},
		"server_resources_api.tmpl": &bintree{templatesServer_resources_apiTmpl, map[string]*bintree{}},
		"server_resources_interface.tmpl": &bintree{templatesServer_resources_interfaceTmpl, map[string]*bintree{}},
		"struct.tmpl": &bintree{templatesStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

