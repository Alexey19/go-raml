// Code generated by go-bindata.
// sources:
// ../templates/client_helper_resource.tmpl
// ../templates/client_resource.tmpl
// ../templates/generic_main.tmpl
// ../templates/python_client.tmpl
// ../templates/python_client_utils.tmpl
// ../templates/server_main.tmpl
// ../templates/server_resources_api.tmpl
// ../templates/server_resources_interface.tmpl
// ../templates/struct.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesClient_helper_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x51\x6f\xd3\x30\x10\x7e\xae\x7f\xc5\x11\x09\x64\xb7\x21\x05\xed\x69\x93\x2a\x24\x36\x4d\x08\x89\x01\xed\x10\x0f\xd3\xb4\xb9\xcd\x75\x0d\x6b\xec\xd4\xb9\x14\xaa\xaa\xff\x1d\x9f\x93\x66\x6d\x19\xd3\x5e\x90\x78\xc9\xec\xf3\x7d\xbe\xef\xfb\x7c\xb7\xae\xd7\x29\x4e\x33\x83\x10\x4d\xe6\x19\x1a\xba\x99\xe1\xbc\x40\x77\xe3\xb0\xb4\x95\x9b\x60\x19\x6d\x36\xa2\xd0\x93\x7b\x7d\x87\x50\xa7\x08\x91\xe5\x85\x75\x04\x52\x74\xa2\xf1\x8a\x7c\x8e\x5f\xa0\x99\xd8\x34\x33\x77\xfd\x1f\xa5\x35\x1c\xc8\x2c\x7f\x0d\x52\x7f\x46\x54\xf0\x7a\x9a\x13\xff\xa1\x2c\xc7\x48\x28\x21\xa6\x95\x99\x40\xc0\xe1\x7b\x9b\xae\x64\xaa\x49\x43\x66\x08\xdd\x54\x4f\x70\xbd\x51\x20\x33\x9b\x0c\x51\xa7\xe8\x62\x40\xe7\xac\x53\xb0\x16\x9d\x71\xd8\xc0\xc9\x00\xb8\x56\xf2\x49\xbb\x72\xa6\xe7\x01\xae\x44\x27\x9b\x86\xd3\x17\x03\x30\xd9\x9c\xd3\x3b\x0e\xa9\x72\x86\xb7\x01\x28\x3a\x1b\xb1\x8d\x05\xfa\xc9\x05\xfe\xac\xab\xc8\xb1\x8a\x39\x4f\x6c\x1a\x76\xa9\x1d\xe2\xe2\x7b\x46\xb3\x40\x30\x47\x9a\xd9\x34\x86\xca\xcd\x47\xe4\xa0\x24\xe7\x05\xc7\x70\xc8\x3b\x6e\x8c\x02\x16\x9e\x9c\x86\x75\x0c\xb3\x50\xa1\x84\x5c\x17\x57\x35\xf2\x7a\x0f\xb3\x28\xbf\x68\xa7\xf3\xe6\x56\xaf\xbd\x1b\xe0\x43\x2c\x0b\x6b\x4a\xdc\x33\xc0\x93\x69\x3d\x38\x30\xf0\xb9\x0e\x88\x4e\xbf\x0f\x13\x87\x9a\x10\x68\x86\xe0\x70\x51\x61\x49\xec\xcc\xa2\xbd\x3b\x30\x08\xee\x84\xc3\x43\x03\x7a\x5b\xd2\x31\x30\xa5\xe7\x97\x9e\x5a\x07\xf7\x31\x2c\xb9\x86\xd3\xc6\xb7\xd6\xd6\x1d\x86\x74\x98\x4c\xf2\x21\x44\x92\x11\x92\xf4\xa9\xbe\x77\x92\x51\xe1\x9d\xa1\xa9\x8c\x5e\x2e\xa3\x78\xa9\x54\x7d\x57\x53\xa0\xb6\x3c\x39\xb3\xd2\x83\x55\xfb\x80\xe3\x2a\x9b\xa7\x5f\x2b\x74\xab\x51\xf0\xb5\x6e\xb2\xc7\xdf\x40\x35\xde\xaf\x83\x8e\x39\x9a\xda\x50\x18\x0c\xe0\xcd\xae\x96\x28\xaa\x2b\x8f\x75\x89\xe1\x6a\x96\x11\xbd\x8b\x1e\xd3\x15\xca\x31\xf6\x21\xb9\x37\x80\x7b\x6f\x5d\x34\x88\xfc\xf7\x41\x97\x5c\x2a\x8e\xbe\x8a\xf6\x64\xb5\xb0\xab\x13\x26\xd4\x6e\xd5\xeb\xb7\xd7\x2c\xb2\xdf\x3f\xe3\x17\x74\x58\xf8\x89\xe5\x9e\x1b\x9e\x9f\x1e\x1d\x1d\x1f\x73\x61\x14\xb4\x2a\x10\x42\x02\x0f\x5d\x72\xe9\x3f\x0c\x69\x26\xe6\xe3\xe8\xf3\x05\xd8\xa5\x7f\x95\x2c\x45\xef\x49\x1b\xac\xad\x93\x04\x5d\xc6\x2a\xd8\xc9\x97\xbe\x31\xaf\xae\x79\x6c\x76\x1b\xb2\x21\x5b\x1f\xc8\xb6\x96\xec\x92\x4a\xce\xad\xcb\x35\xc9\xdb\xe8\xd6\xcb\x0b\x47\x81\xe2\xd1\xb1\xdf\xfa\xa0\x7a\x98\xb8\x96\xd8\x25\xfe\xa2\x3f\x88\x71\xf0\x2f\xc4\xf8\xe8\xdf\x12\xfb\x66\xf2\xc7\x3c\xab\xcc\x13\xae\xed\x61\xe4\xb8\x21\xa1\x6a\x76\x4c\x8e\xca\x76\xd0\x42\x79\x3f\x4a\x25\x32\x9f\xde\x2e\x9b\x9e\x0f\xc4\x4d\x67\xfa\xff\x4f\x4f\x0d\x59\x3b\x5f\x5d\x82\x41\x78\x77\x49\xa5\x12\x3b\x33\x78\xa0\x66\xdf\xe8\xca\x3c\x61\xf5\x1e\xe6\x3f\x52\x73\x40\xb3\x99\xf2\xed\x28\xef\xf4\xc0\xfe\xe3\x6f\xf3\xf8\x8a\xf5\x1a\x4d\xea\x7f\xe6\x7e\x07\x00\x00\xff\xff\x51\x79\xd6\x10\x0c\x07\x00\x00")

func TemplatesClient_helper_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_helper_resourceTmpl,
		"../templates/client_helper_resource.tmpl",
	)
}

func TemplatesClient_helper_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_helper_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_helper_resource.tmpl", size: 1804, mode: os.FileMode(420), modTime: time.Unix(1455674133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesClient_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4d\x4f\xdb\x40\x10\x3d\x7b\x7f\xc5\xd4\x4a\x91\x4d\x2d\xe7\x5e\x29\x17\x20\xfd\x90\x28\xa2\x01\xda\x63\x65\xec\x31\x31\x24\x5e\x67\x77\x1d\x84\x5c\xff\xf7\xce\xec\xda\x8e\x09\x2d\x52\x91\xca\xa9\x39\x6d\xe6\xf3\xcd\x9b\xb7\xeb\xa6\xc9\x30\x2f\x4a\x04\x3f\x5d\x15\x58\x9a\x1f\x0a\xb5\xac\x55\x8a\x7e\xdb\x8a\x2a\x49\xef\x92\x1b\x04\xe7\x12\xa2\x58\x57\x52\x19\x08\x84\xe7\x97\x68\xa6\x4b\x63\x2a\x5f\x78\x9e\x8f\x65\x2a\xb3\xa2\xbc\x99\xde\x6a\x59\x5a\x4b\xbe\x36\xbe\x08\x85\x48\x65\xa9\x6d\x82\x92\xd2\x5c\x2d\x4e\x61\x06\x7e\xd3\xc4\x47\x89\xc6\xab\xc5\xe7\xb6\xb5\x41\x4d\x33\x49\xaa\xe2\x2c\x59\x23\xbc\x9f\x41\xcc\x07\x6a\x6e\x1e\x2a\x04\x8a\x75\x7f\x41\x1b\x55\xa7\x06\x1a\xe1\x39\x34\xc0\xdd\xe3\x63\x87\xac\x15\x22\xaf\xcb\x14\xce\xf0\x7e\xc8\x08\x42\x38\xdc\xa5\x73\x1e\x57\x2f\xf1\x3e\x18\xac\x21\x19\xe3\xae\xdc\x6c\x5c\xb0\x69\x09\x31\x9a\x5a\x95\x90\x72\xf1\xa6\x01\x95\x94\xc4\xc4\xe4\x2e\x82\xc9\xd6\xc2\xfc\x82\x66\x29\x33\x0d\x04\x75\xe4\xce\xd9\x9f\x73\xc0\x64\x1b\x7f\x20\x4c\xc7\x72\xbd\xa6\x8a\x1c\x37\x9d\xd2\x3c\xe4\x65\x38\x0d\x96\x19\x65\x32\xea\x20\x65\xa0\x3d\x05\x84\xca\x46\x75\xf5\xbb\x59\x46\x96\xf3\x44\x25\x6b\x8a\x72\xb6\x05\xea\xea\x48\x66\x0f\xb6\x66\x91\xd3\x7c\x30\xb2\x82\xef\x53\xdf\xa8\x6f\x77\x68\x47\x64\x27\xad\x05\x23\x54\x4a\xaa\x90\xa9\xd9\x68\x5b\x95\x61\x5f\xd7\xc5\x2a\xfb\x5a\xa3\x7a\xb8\x30\x8a\x76\x1a\x6c\xf8\x6c\xdd\x9a\xf8\xb2\x4d\x70\xc3\x4d\xbe\xa1\xba\x06\xff\xe3\xfc\x92\xa5\xe2\x79\x7f\x6c\x0f\xdb\x44\x41\x0d\x4f\xe1\x3a\x0a\x28\x95\x88\x49\x15\x26\x06\x41\x21\xb5\x23\xc5\xc8\xeb\x5b\x4c\x0d\xb9\xc8\x10\x01\x01\x65\x68\x16\x3d\xad\x78\xe1\x82\x02\xdb\x3b\x82\x5e\x5a\x8f\x01\x58\x11\x9f\x27\x66\xd9\x81\x78\xd7\x37\x1c\x80\x0c\x11\xd6\xdb\x51\x10\x41\x59\xac\x68\x4e\x8f\xc7\xa4\xb6\x6f\x66\x6c\x60\x8e\x9e\x9b\xb0\xd3\x4a\x6d\xb3\x2d\x5e\x17\x8f\x2b\x8d\x3b\xf7\x9e\xcf\x4e\xef\x79\x96\x81\x5c\x2a\x20\x69\x59\x65\x39\x29\x2d\x31\xc9\x50\x69\xea\x0c\xfd\x8f\xb8\x88\x3f\x59\x73\x7c\x81\x26\xa0\x78\xba\x66\xf1\x45\x45\x6b\x32\x79\xe0\xbf\xdd\x12\x19\xdb\x30\xb4\x09\x1d\xaf\x99\x04\xb3\x1c\x68\xb5\x7c\xea\x6a\x20\xb4\x17\x7f\x7c\x22\x03\x0a\x79\xe5\xb1\x3d\x8f\x9e\x1e\x54\xc0\x90\x62\xae\x4a\x97\x4f\x6a\x0c\x42\xf1\x9c\x9a\xb8\xca\xae\xaf\x1b\x87\x9f\x1d\x16\xc6\x09\xd2\x3b\x84\x2a\x18\x2a\x86\xb1\x33\x05\x07\x75\x28\x76\xc8\x46\x35\x5c\x01\x82\x28\x76\xe0\x44\x17\x08\x7b\x52\x3f\x99\x9f\xce\x2f\xe7\x4e\xed\x2f\x95\x6c\x57\x63\x50\xed\x3f\x17\xed\xd3\x25\xbc\xb6\xe0\xdc\x33\xba\x2f\x35\x31\xde\xc6\xcb\xdf\x0e\x07\x73\xa4\xe9\x4c\x12\xd7\xdf\x0b\xb3\xe4\xd0\xc0\xb7\x99\xbc\x3e\xfa\xd6\xfc\x2d\xe9\xbf\xe1\x3c\x7a\xfc\xca\x6c\x3a\xa4\x6d\x7b\xf0\x38\xc7\x39\x7e\xc2\xa5\x3c\x95\xf7\xa8\x38\xb1\x67\x20\xea\x99\x8e\xfa\xf5\xfd\xbf\x77\x1d\xb8\xfe\x60\xbf\xa8\x74\xe4\xb6\xa3\xe3\xaf\x00\x00\x00\xff\xff\x97\x0e\x7e\xf8\xac\x08\x00\x00")

func TemplatesClient_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_resourceTmpl,
		"../templates/client_resource.tmpl",
	)
}

func TemplatesClient_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_resource.tmpl", size: 2220, mode: os.FileMode(420), modTime: time.Unix(1455696079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesGeneric_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4f\xcd\x4b\x2d\xca\x4c\x8e\xcf\x4d\xcc\xcc\x8b\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x00\x49\x70\x71\xa5\x95\xe6\x25\x83\x99\x1a\x9a\xd5\x5c\x5c\xb5\x5c\xd5\xd5\xa9\x79\x29\x40\x55\x80\x00\x00\x00\xff\xff\xdc\x57\x73\x81\x49\x00\x00\x00")

func TemplatesGeneric_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesGeneric_mainTmpl,
		"../templates/generic_main.tmpl",
	)
}

func TemplatesGeneric_mainTmpl() (*asset, error) {
	bytes, err := TemplatesGeneric_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/generic_main.tmpl", size: 73, mode: os.FileMode(420), modTime: time.Unix(1455674133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x51\x41\xcf\xda\x30\x0c\xbd\xe7\x57\x58\x15\x07\x10\xa8\xda\x19\x89\x03\xa0\x4d\x9a\xb4\x4d\x0c\xb6\x5d\xab\xd0\xba\x6d\xb4\x34\x05\x27\x61\x42\x5d\xfe\xfb\x9c\x96\xf5\x2b\x7c\x3d\x34\x8e\xfd\xfc\xfc\xf2\xdc\x75\x50\x60\xa9\x0c\x42\x72\xb9\xbb\xba\x35\x59\xae\x15\x1a\x97\x39\x6c\x2e\x5a\x3a\x4c\x20\x04\xa1\x9a\x4b\x4b\x0e\x08\xaf\x1e\xad\xb3\xa2\xa4\xb6\x81\x07\xd0\x3b\xa5\x2d\x3c\x10\x67\xaf\x74\xf1\xdd\x23\xdd\x4f\x8e\x94\xa9\x84\xd8\x6d\x4f\x1f\xb3\x9f\xc7\xcf\xb0\x81\xa4\xeb\xd2\x9d\xb4\xc8\xb7\x10\x12\x21\x72\x2d\xad\x85\x7d\x4f\xb3\x16\xc0\x1f\x4b\x81\x2c\x53\x46\xb9\x2c\x9b\x5b\xd4\xe5\x62\xc8\xc7\x2f\x5e\x53\x4f\x9a\x89\xfe\x73\x0a\xc1\xf2\x49\x9a\x0a\x61\xf6\x7b\x05\xb3\x1b\xac\x37\x90\x1e\xfa\x77\x7c\x45\xfe\x17\x36\xaa\x1f\xa9\xbb\x6e\x76\x4b\x87\xc2\x37\xd9\x60\x08\xf3\x3e\x73\x90\x24\x1b\x1b\xc2\x64\x18\xe7\xf3\xb6\x69\x58\x98\x46\x53\xb9\x3a\x12\x73\xc4\x23\xd2\x4f\xde\xe4\xfb\xa1\xc6\x3d\x93\x0e\x55\x02\xdb\xf8\xd2\xf7\x81\x05\x24\x49\x32\x81\x8d\x82\xcb\xa8\xb8\x8c\xcc\x2f\xac\xdc\x12\x75\x95\xf1\x40\x53\x4c\x86\x3c\x33\x3d\xd7\x3c\x29\xb6\xa6\x7f\xd0\x11\x6d\xeb\x29\xc7\x83\x74\xf5\x04\x41\xe8\x3c\x99\x71\x8b\x69\x8f\xfd\x85\x74\x86\xbf\xf0\xa3\xfd\xd2\xfe\x41\x62\x4b\x46\x9f\x97\x3d\xe5\xf2\xdd\x4e\xe7\xd7\x18\x0f\xa6\x2d\x06\x03\x8f\x5b\xaa\xd8\x0c\x58\xd5\x28\x0b\x24\xbb\x79\x9c\x8b\xb8\x20\x96\xd9\x6f\xe1\x2d\xfc\x17\x00\x00\xff\xff\x76\x5e\x4d\xac\x75\x02\x00\x00")

func TemplatesPython_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_clientTmpl,
		"../templates/python_client.tmpl",
	)
}

func TemplatesPython_clientTmpl() (*asset, error) {
	bytes, err := TemplatesPython_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client.tmpl", size: 629, mode: os.FileMode(420), modTime: time.Unix(1455694371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_client_utilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x65\x0f\xc5\xc6\xed\xa1\x57\x83\xe8\x1b\x94\x96\x1c\x43\x30\x4e\xbc\x4e\x96\xc8\xeb\x58\x3f\x07\x23\xfc\xee\x91\x1c\x43\x3c\x07\x21\xcd\xa7\x99\x65\x63\xec\xa8\x67\x21\xc0\xc7\xec\x6f\xa3\x34\x17\xc3\x24\xbe\x09\x9e\x8d\xc3\x65\x51\x09\xc3\x39\xb0\xe9\xfe\x03\xd9\xf9\xe0\x2d\xcb\xb5\x98\xf2\xfd\xaf\xb5\xed\xe0\xf4\xef\x28\x54\xd6\x0a\x92\xb8\x87\x1d\x01\x76\x90\xe1\x8b\x65\x59\xf2\xc1\x0a\x20\xaa\xd5\x9a\x1c\x68\xc0\x1f\x5c\x1f\xfd\x68\xe1\x4e\xf3\x27\x90\xa1\x01\x58\xf6\x4d\xef\x86\x14\xa9\x74\xfe\x07\x15\xa0\xc6\x74\x3a\x6f\x8b\x1c\x29\xb3\xf3\xb1\x35\x6f\x83\x26\x77\xac\xbf\xbe\x4f\x2a\x46\x92\x2e\xed\xf2\x0c\x00\x00\xff\xff\xe8\x33\x27\xf9\xed\x00\x00\x00")

func TemplatesPython_client_utilsTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_client_utilsTmpl,
		"../templates/python_client_utils.tmpl",
	)
}

func TemplatesPython_client_utilsTmpl() (*asset, error) {
	bytes, err := TemplatesPython_client_utilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client_utils.tmpl", size: 237, mode: os.FileMode(420), modTime: time.Unix(1455674133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x94\x41\x6f\xdb\x3c\x0c\x86\xcf\xd6\xaf\xe0\x27\xf4\x20\x35\x86\x53\x20\x97\xa6\x40\x0e\xc5\x57\x14\xe8\xb0\x65\x41\xd2\x9d\x86\xa1\x55\x12\x26\x11\x6a\xcb\x86\x44\x77\x2d\x0c\xff\xf7\x51\x76\x9b\x25\xeb\xd6\xdb\x80\x5d\x12\x9b\xe4\xfb\xea\x21\x6d\xba\x69\xd6\xb8\xb1\x0e\x41\x06\xf4\x8f\xe8\xef\x0a\x63\xdd\x1d\x61\x51\xe5\x86\x50\xb6\xad\xa8\xcc\xea\xc1\x6c\x11\x62\x42\x08\x5b\x54\xa5\x27\x50\x22\x91\x79\xb9\x95\xfc\xe7\x90\x86\x3b\xa2\x2a\x5e\x93\x2d\x50\x0a\xbe\xd8\x5a\xda\xd5\xcb\x6c\x55\x16\xc3\x6d\xe9\x6d\x9e\x9b\x61\x51\x3f\x49\xa1\x85\x18\x0e\xaf\xd8\x19\x3c\x56\x1e\x03\x3a\x82\xf9\xf5\xff\xa3\xd1\x78\x0c\x6b\x0e\x0b\x7a\xae\x10\xba\x82\xe8\x95\xdd\xf2\x4f\x94\x7c\x32\x3e\xec\x4c\xfe\x61\xf1\x79\x0a\x25\x63\x7a\xbb\x8e\x44\xfb\xa0\xd8\xd4\x6e\x05\x8a\xe0\x34\x6a\x35\x1c\xd4\x2b\x0d\xea\xeb\xb7\xe5\x33\x61\x0a\x2c\x2c\xbd\x86\x46\x24\x1e\xa9\xf6\x0e\xfa\x84\xda\x9f\xa5\x4e\x49\x67\xd7\xa5\x2f\x0c\xa9\x7b\x79\x0f\x83\x1e\xa3\x43\x1c\x8d\xf9\x96\x83\x5a\xa7\xe0\x6c\x2e\xda\x03\xb0\x5b\x7c\xa2\x37\x60\x31\xf8\x07\xb0\x98\xfa\xbb\x60\x5f\x5c\xf1\xbb\x99\xd5\xee\x9d\xa9\x1d\x69\xd4\xf2\x05\x42\xf7\x74\x11\x8e\x42\x87\x0a\x17\x93\xfe\xf8\x19\x97\x63\xe4\x19\x1c\xd2\x0c\x38\x90\x42\x20\x6f\xdd\x56\x2d\xb5\x16\x89\xdd\x74\xb2\xff\x26\x91\x2f\x1a\xbd\xb6\xc9\x51\x91\x30\x6f\x72\x4a\x30\xe9\x9e\xbb\xa2\xa0\xf7\x53\x78\xdb\xcd\xf1\xa0\x6b\xf7\xce\xa8\x8f\x34\xff\x50\x37\xbf\x60\x2e\x7a\x67\xfd\x72\xc4\xc1\x3b\x70\xfc\xf0\x5f\xeb\xf6\x16\x71\x21\x55\xff\xce\xc4\x16\x78\xbf\xb2\x29\x7e\x9f\x97\x35\xa1\xe7\x32\x91\x34\x0d\x78\xe3\x78\x75\x4f\x1e\x52\x38\x79\x8c\x45\xd9\x1c\x43\x59\xfb\x15\x86\x2b\xdc\x00\x6f\x37\x17\x65\x53\x53\x60\xdb\xde\x38\xd6\x6d\xcc\x0a\x3b\x87\xa0\x7c\x0a\xfb\xdc\xe5\xec\xa6\x69\x75\xe7\x88\x6e\x1d\x75\x22\xe1\xf5\xcf\x66\x8c\x44\xb9\x53\x32\x90\xf1\x14\xe9\xfb\xaf\x88\xe4\xda\xf8\x4d\xc8\x3e\xda\x40\xe8\x2e\xdd\x7a\x11\xe3\x4a\x5e\x9c\x9f\x9d\x9f\xc9\x14\x7c\xd7\xc6\x4f\xbb\x1f\x01\x00\x00\xff\xff\x59\x47\x31\x24\x87\x04\x00\x00")

func TemplatesServer_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_mainTmpl,
		"../templates/server_main.tmpl",
	)
}

func TemplatesServer_mainTmpl() (*asset, error) {
	bytes, err := TemplatesServer_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_main.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1455674133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_apiTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x52\xcd\x8e\xd3\x30\x10\x3e\xc7\x4f\x31\x58\x15\x4a\x50\xe5\xee\x81\x13\xab\x3d\x80\x00\x01\x12\x65\x61\x25\x38\xae\x4c\x33\xdd\x86\x26\x76\x32\x71\x1a\x55\x56\xde\x9d\x19\x27\xa5\x6c\x4e\xf6\xf8\xfb\xf3\xe7\xc4\x58\xe2\xbe\x72\x08\x9a\xb0\xf7\x03\xed\xf0\xd1\xb6\xd5\x63\xc0\xa6\xad\x6d\x40\x3d\x4d\xaa\xb5\xbb\xa3\x7d\x42\x68\x6c\xe5\x94\xaa\x9a\xd6\x53\x80\x5c\x65\x31\x42\xb5\x07\xb3\x45\x2c\xbf\x3c\x7c\xdb\xc2\x34\x69\x74\x3b\x5f\x56\xee\x69\xf3\xa7\xf7\x4e\x33\x00\x5d\xc9\x73\x95\x69\x87\x61\x73\x08\xa1\xd5\xaa\x50\x31\xae\xd8\x63\x6b\x1b\x84\x37\x77\x2c\xc0\x0b\xc6\x84\x73\x8b\x10\xe3\xb2\x7d\x7b\xff\x19\xfa\x40\xc3\x2e\x40\x54\x93\x52\x4c\x02\xb2\x8e\x63\xac\x8e\x6b\x58\x9d\x12\xf3\x2b\x86\x83\x2f\x7b\x71\xd8\x0f\x6e\x97\xb3\x2a\x5c\xc5\x93\x48\x21\x83\xd3\x82\x9c\xa7\xf9\x08\x92\xc4\xfc\xc0\xbe\xf5\xae\xc7\x5f\x54\x05\xa4\x35\x10\xbc\x5a\xe6\xdd\x80\x7d\x60\xa6\xdc\xf1\x62\xda\x89\x6b\x27\xb6\x2c\xf7\x7d\x40\x3a\xdf\x5b\x62\x3d\xa6\xf6\xec\x0f\xfc\x6d\x36\x62\x76\xec\xa6\x49\x60\x84\x9d\xf9\xe8\xa9\xf9\x69\xeb\x01\x73\xbd\x9c\xe8\x42\x44\xb9\x16\x69\x25\x46\x29\x90\xfd\xde\xf9\xf2\x2c\x83\x93\x25\xe1\xc9\x56\xaa\xb8\x9e\xa8\x8c\x91\x48\x24\xc2\xd2\x2d\xb7\x3e\xbe\x47\x2e\x1b\x29\x27\x23\xa0\xc2\xcc\xfb\xfc\xe5\x22\x50\xdc\x26\xc2\x8b\x3b\x70\x55\x2d\x77\xc9\x46\x93\xae\xfa\x09\xad\xd0\x5e\xdf\xdc\x70\x96\x8c\x30\x0c\xe4\x54\x96\xe2\x5c\xde\xeb\xdf\xe3\x4a\x47\x29\xcd\x35\xdd\x32\x48\xf1\xe6\xb5\x9c\x5d\x42\x7d\x70\x73\xa8\xb1\x30\xf3\x52\xf2\xcc\xb0\xe2\xf6\xb9\x05\xd7\xc5\x8f\xe6\x9b\x06\x5d\x80\xdf\x58\xfb\x11\x6a\xf9\x13\x83\x07\x5b\x96\x70\x48\x31\x13\x6c\x34\x73\x66\xf3\x80\x21\xd7\x47\x3c\xeb\xb5\x3e\x49\xad\xdc\xe6\xa4\xfe\xd3\xbc\x2e\xff\x06\x00\x00\xff\xff\x02\x8c\xf9\xed\xd8\x02\x00\x00")

func TemplatesServer_resources_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_apiTmpl,
		"../templates/server_resources_api.tmpl",
	)
}

func TemplatesServer_resources_apiTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_api.tmpl", size: 728, mode: os.FileMode(420), modTime: time.Unix(1455696100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_interfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3f\x4f\xf3\x30\x10\xc6\xe7\xf8\x53\x9c\xa2\x0e\x49\x55\x39\xfb\x2b\xbd\x13\x02\xc1\x00\x43\x07\x18\x2b\x37\xb9\xb4\x56\xe3\x3f\xd8\x97\x0a\x64\xf9\xbb\x73\x2e\xad\x40\x50\x89\xcd\xf1\xfd\xf2\xdc\xf3\x73\x4a\x03\x8e\xda\x22\xd4\x01\xa3\x9b\x43\x8f\x1b\x3d\x6e\x08\x8d\x9f\x14\x61\x9d\xb3\xf0\xaa\x3f\xa8\x1d\x82\x51\xda\x0a\xa1\x8d\x77\x81\xa0\x11\x55\xbd\xd3\xb4\x9f\xb7\xb2\x77\xa6\xdb\xb9\xa0\xa7\x49\x75\x66\x7e\xab\x79\x62\x91\xba\x3d\x91\xaf\x45\x2b\x04\xbd\x7b\x84\x94\xe4\x93\x32\x98\xf3\x83\x25\x0c\xa3\xea\x11\xf4\xe5\x94\x44\x95\x12\x04\x65\x79\xc9\xe2\xb0\x82\xc5\x11\xfe\xfd\x07\xf9\x88\xb4\x77\x43\x04\xae\x50\x01\x7c\x23\xc6\x82\x8c\x85\x59\x1c\xe5\xdd\x6c\xfb\x1b\x67\x0c\x5a\x8a\x39\x77\x1d\x83\x3c\xcc\x39\x25\xb4\x43\xf9\xb5\x2a\x17\xe7\xb0\xcf\x0a\x4d\xa9\x26\xd7\x18\xbd\xb3\x11\x5f\x82\xe6\x1e\x2b\x58\x9e\x6f\x5f\x67\x8c\xd4\x9e\x2a\x71\x42\xd9\x9e\x85\x18\x79\xcb\x15\x87\xb5\x9b\x09\x63\x13\x60\xc9\xe2\xf2\xf4\xc5\x49\xfa\x0a\xd9\xb2\xc1\xdf\x9a\x55\x90\xf7\xca\x0e\x13\x16\xab\xa6\x3e\x35\xbf\xb5\x83\x77\xfc\x56\x39\xd7\x1c\x2d\x7f\xd9\xb4\x97\x84\x33\xff\x8c\x61\xcb\xec\x0f\x83\xaf\xf3\x47\x00\x00\x00\xff\xff\xfe\xc2\xc2\xf5\xf1\x01\x00\x00")

func TemplatesServer_resources_interfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_interfaceTmpl,
		"../templates/server_resources_interface.tmpl",
	)
}

func TemplatesServer_resources_interfaceTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_interfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_interface.tmpl", size: 497, mode: os.FileMode(420), modTime: time.Unix(1455674133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\x43\xe8\x51\xb2\xf7\x05\x4f\x8a\xe0\x45\x3c\x78\x77\x43\x3b\x95\xd8\x34\x89\x4d\x2a\x94\x61\xfe\xbb\x93\x26\xc2\xe6\xf4\x32\x6f\xde\xbc\x8f\x68\xc2\xd9\x05\x04\x9d\xcb\xb6\x8f\xe5\xb3\xe0\x9a\xbc\x2d\xa8\x99\x55\xb2\xe3\x62\xbf\x10\x88\xcc\x7b\x93\x6f\x76\x45\x31\x14\x91\x9b\x41\x52\x83\x79\xc6\x3c\x6e\x2e\x15\x17\x03\x68\x0d\xcc\x97\x0b\x11\x86\x89\xb9\xc6\xee\x5c\x89\x95\x23\xd5\x63\x60\xea\x19\x59\x85\xd6\x09\xa4\x40\x9e\x18\x9b\x0d\x52\x37\x2c\x78\x3c\xc0\xf0\x6b\xfd\x8e\x70\x7d\x04\xf3\xe2\xd0\x4f\x59\x02\x44\x6d\x6a\x1a\x47\xcd\x08\x07\xfe\xf4\x65\xf3\x9a\x9f\xe2\x9a\x62\x76\x27\xce\x6c\x7d\xc6\x93\xa3\xdb\x1f\xd2\x2f\xff\xdb\x77\x8e\xe1\xaa\x65\x2c\x45\xcc\xfa\x06\x9d\xb8\x63\x34\xcd\xea\x5f\xfd\x05\x00\x00\xff\xff\x65\x3c\x23\x77\x24\x01\x00\x00")

func TemplatesStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesStructTmpl,
		"../templates/struct.tmpl",
	)
}

func TemplatesStructTmpl() (*asset, error) {
	bytes, err := TemplatesStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/struct.tmpl", size: 292, mode: os.FileMode(420), modTime: time.Unix(1455679371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../templates/client_helper_resource.tmpl": TemplatesClient_helper_resourceTmpl,
	"../templates/client_resource.tmpl": TemplatesClient_resourceTmpl,
	"../templates/generic_main.tmpl": TemplatesGeneric_mainTmpl,
	"../templates/python_client.tmpl": TemplatesPython_clientTmpl,
	"../templates/python_client_utils.tmpl": TemplatesPython_client_utilsTmpl,
	"../templates/server_main.tmpl": TemplatesServer_mainTmpl,
	"../templates/server_resources_api.tmpl": TemplatesServer_resources_apiTmpl,
	"../templates/server_resources_interface.tmpl": TemplatesServer_resources_interfaceTmpl,
	"../templates/struct.tmpl": TemplatesStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"client_helper_resource.tmpl": &bintree{TemplatesClient_helper_resourceTmpl, map[string]*bintree{}},
			"client_resource.tmpl": &bintree{TemplatesClient_resourceTmpl, map[string]*bintree{}},
			"generic_main.tmpl": &bintree{TemplatesGeneric_mainTmpl, map[string]*bintree{}},
			"python_client.tmpl": &bintree{TemplatesPython_clientTmpl, map[string]*bintree{}},
			"python_client_utils.tmpl": &bintree{TemplatesPython_client_utilsTmpl, map[string]*bintree{}},
			"server_main.tmpl": &bintree{TemplatesServer_mainTmpl, map[string]*bintree{}},
			"server_resources_api.tmpl": &bintree{TemplatesServer_resources_apiTmpl, map[string]*bintree{}},
			"server_resources_interface.tmpl": &bintree{TemplatesServer_resources_interfaceTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{TemplatesStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

