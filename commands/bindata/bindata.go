// Code generated by go-bindata.
// sources:
// ../templates/client_helper_resource.tmpl
// ../templates/client_resource.tmpl
// ../templates/generic_main.tmpl
// ../templates/python_client.tmpl
// ../templates/python_client_utils.tmpl
// ../templates/server_main.tmpl
// ../templates/server_resources_api.tmpl
// ../templates/server_resources_interface.tmpl
// ../templates/struct.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesClient_helper_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcd\x8e\xd3\x30\x10\x3e\xc7\x4f\x31\x58\x02\xc5\x6c\x48\xe1\xba\x52\x84\x04\x1c\xb8\x80\xa0\x3d\x70\x58\xad\x56\x6e\x32\xd9\x98\xa6\x76\x3a\x76\x8a\xaa\x28\xef\x8e\xed\xa4\xd9\x6d\xb5\x87\xbd\x44\xf6\x78\xbe\xf9\x7e\xec\x0c\x43\x85\xb5\xd2\x08\xbc\x6c\x15\x6a\xf7\xd0\x60\xdb\x21\x3d\x10\x5a\xd3\x53\x89\x96\x8f\x23\xeb\x64\xb9\x93\x8f\x08\x53\x0b\x63\x6a\xdf\x19\x72\x90\xb2\x84\x6f\x4f\xce\xf7\xf8\x05\xea\xd2\x54\x4a\x3f\xae\xfe\x5a\xa3\x43\x41\x99\xf0\xd5\xe8\x56\x8d\x73\x5d\x58\xd7\x7b\xc7\x99\x60\xac\xee\x75\x09\xb1\x1f\xbf\x98\xea\x94\x56\xd2\x49\x50\xda\x21\xd5\xb2\xc4\x61\x14\x90\x2a\x93\xaf\x51\x56\x48\x19\x20\x91\x21\x01\x03\x4b\xb6\x71\x03\xb7\x05\x04\x8e\xfc\x87\x24\xdb\xc8\x36\xc2\x05\x4b\x54\x1d\x4f\xdf\x14\xa0\x55\x1b\xda\x13\x42\xd7\x93\x0e\xdb\x08\x64\xc9\xc8\xce\xb5\x28\x3b\xff\x89\xff\x26\x96\x74\x2b\xb2\xd0\xc7\xc6\x59\x5d\x65\xd6\x78\xf8\xa3\x5c\x13\x05\xee\xd1\x35\xa6\xca\xa0\xa7\x76\xe3\x08\xac\x23\x6f\x34\x83\x6b\xdd\xd9\x1c\x10\x04\xc3\xf9\xd7\xb8\xce\xa0\x89\x0c\x16\xf6\xb2\xbb\x9b\x90\xf7\x17\x98\x83\xfd\x25\x49\xee\xe7\xa9\xde\xfb\xfb\x08\x5f\xa3\xed\x8c\xb6\x78\x11\x80\x17\xb3\x64\x70\x15\xe0\x6b\x13\x60\xc9\x6a\x05\x25\xa1\x74\x08\xae\x41\x20\x3c\xf4\x68\x5d\x48\xe6\xb0\xcc\x8e\x0a\x62\x3a\xf1\xf0\x3a\x80\x9b\xb3\xe8\x0c\x82\xa4\xd7\x53\xd7\x86\x60\x97\xc1\x31\x70\x90\xd4\xfe\x49\x9d\xd3\x09\x90\x24\x88\xc9\xbf\xc7\x4a\xbe\x41\x97\xfa\x56\xff\x66\xf2\x4d\xe7\x93\x71\x75\xca\xdf\x1e\x79\x76\x14\x62\x9a\x35\x13\x4c\x91\xe7\xdf\x4c\xea\xc1\x62\xb9\xc0\x6d\xaf\xda\xea\x77\x8f\x74\xda\xc4\x5c\xa7\x47\xf6\xf2\x1d\x88\x39\xfb\x21\xfa\x68\x51\x4f\x81\x42\x51\xc0\xc7\xe7\x5e\x38\x9f\x98\xb7\xd2\x62\x1c\x1d\x6c\xf0\xcf\xfc\x25\x5f\x91\x2e\x60\x9f\x9a\x6f\x0a\xd8\xf9\xe8\x78\xc1\xfd\xf7\xc9\x57\x7a\x14\xa1\xfa\x8e\x5f\xd8\x5a\x60\x77\xb7\x41\xd0\xb2\x15\x1f\x3e\xdd\x7b\x93\xc3\x80\xba\xf2\x7f\xe6\xff\x00\x00\x00\xff\xff\x9f\x16\xfa\x70\xbf\x03\x00\x00")

func TemplatesClient_helper_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_helper_resourceTmpl,
		"../templates/client_helper_resource.tmpl",
	)
}

func TemplatesClient_helper_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_helper_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_helper_resource.tmpl", size: 959, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesClient_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4d\x4f\xdb\x40\x10\x3d\x7b\x7f\xc5\xd4\x4a\x2b\x9b\x5a\xce\xbd\x52\x2e\x40\xfa\x21\x51\x44\x03\xb4\xc7\xca\xd8\x63\x62\x48\x76\x9d\xdd\x75\x10\x72\xf3\xdf\x3b\xb3\x6b\x3b\x2e\xb4\x48\x45\x2a\xa7\xe6\xb4\x99\xcf\x37\x6f\xde\xae\xdb\xb6\xc0\xb2\x92\x08\x61\xbe\xaa\x50\xda\xef\x1a\x8d\x6a\x74\x8e\xe1\x6e\x27\xea\x2c\xbf\xcd\xae\x11\xbc\x4b\x88\x6a\x5d\x2b\x6d\x21\x12\x41\x28\xd1\x4e\x97\xd6\xd6\xa1\x08\x82\x10\x65\xae\x8a\x4a\x5e\x4f\x6f\x8c\x92\xce\x52\xae\x6d\x28\x62\x21\x72\x25\x8d\x4b\xd0\x4a\xd9\xcb\xc5\x09\xcc\x20\x6c\xdb\xf4\x30\x33\x78\xb9\xf8\xb4\xdb\xb9\xa0\xb6\x9d\x64\x75\x75\x9a\xad\x11\xde\xcd\x20\xe5\x03\x35\xb7\xf7\x35\x02\xc5\xfa\xbf\x60\xac\x6e\x72\x0b\xad\x08\x3c\x1a\xe0\xee\xe9\x91\x47\xb6\x13\xa2\x6c\x64\x0e\xa7\x78\x37\x64\x44\x31\x1c\xec\xd3\x39\x8f\xab\x4b\xbc\x8b\x06\x6b\x4c\xc6\xb4\x2b\x37\x1b\x17\x6c\x77\x84\x18\x6d\xa3\x25\xe4\x5c\xbc\x6d\x41\x67\x92\x98\x98\xdc\x26\x30\xd9\x3a\x98\x9f\xd1\x2e\x55\x61\x80\xa0\x8e\xdc\x25\xfb\x4b\x0e\x98\x6c\xd3\xf7\x84\xe9\x48\xad\xd7\x54\x91\xe3\xa6\x53\x9a\x87\xbc\x0c\xa7\x45\x59\x50\x26\xa3\x8e\x72\x06\xda\x53\x40\xa8\x5c\x54\x57\xbf\x9b\x65\x64\x39\xcb\x74\xb6\xa6\x28\x6f\x5b\xa0\xa9\x0f\x55\x71\xef\x6a\x56\x25\xcd\x07\x23\x2b\x84\x21\xf5\x4d\xfa\x76\x07\x6e\x44\x76\xd2\x5a\x30\x41\xad\x95\x8e\x99\x9a\x8d\x71\x55\x19\xf6\x55\x53\xad\x8a\x2f\x0d\xea\xfb\x73\xab\x69\xa7\xd1\x86\xcf\xce\x6d\x88\x2f\xd7\x04\x37\xdc\xe4\x2b\xea\x2b\x08\x3f\xcc\x2f\x58\x2a\x41\xf0\xc7\xf6\xb0\xcd\x34\x34\xf0\x18\xae\xa7\x80\x52\x89\x98\x5c\x63\x66\x11\x34\x52\x3b\x52\x8c\xba\xba\xc1\xdc\x92\x8b\x0c\x09\x10\x50\x86\xe6\xd0\xd3\x8a\x17\x3e\x28\x72\xbd\x13\xe8\xa5\xf5\x2b\x00\x27\xe2\xb3\xcc\x2e\x3b\x10\x6f\xfb\x86\x03\x90\x21\xc2\x79\x3b\x0a\x12\x90\xd5\x8a\xe6\x0c\x78\x4c\x6a\xfb\x6a\xc6\x06\xe6\xe8\xa9\x09\x3b\xad\x34\x2e\xdb\xe1\xf5\xf1\xb8\x32\xb8\x77\x3f\xf0\xb9\xe9\x83\xc0\x31\x50\x2a\x0d\x24\x2d\xa7\x2c\x2f\xa5\x25\x66\x05\x6a\x43\x9d\xa1\xff\x11\x17\xe9\x47\x67\x4e\xcf\xd1\x46\x14\x4f\xd7\x2c\x3d\xaf\x69\x4d\xb6\x8c\xc2\xd7\x5b\x22\x63\x1b\xc7\x2e\xa1\xe3\xb5\x50\x60\x97\x03\xad\x8e\x4f\x53\x0f\x84\xf6\xe2\x4f\x8f\x55\x44\x21\x2f\x3c\x76\x10\xd0\xd3\x83\x1a\x18\x52\xca\x55\xe9\xf2\x29\x83\x51\x2c\x9e\x52\x13\x57\xd9\xf7\xf5\xe3\xf0\xb3\xc3\xc2\x38\x46\x7a\x87\x50\x47\x43\xc5\x38\xf5\xa6\xe8\x4d\x13\x8b\x3d\xb2\x51\x0d\x5f\x80\x20\x8a\x3d\x38\xd1\x05\xc2\x03\xa9\x1f\xcf\x4f\xe6\x17\x73\xaf\xf6\xe7\x4a\xb6\xab\x31\xa8\xf6\x9f\x8b\xf6\xf1\x12\x5e\x5a\x70\xfe\x19\x7d\x28\x35\x31\xde\xc6\xf3\xdf\x0e\x0f\x73\xa4\xe9\x42\x11\xd7\xdf\x2a\xbb\xe4\xd0\x28\x74\x99\xbc\x3e\xfa\xd6\xfc\x2d\xe9\xbf\xe1\x3c\xe9\xa1\x6c\x1c\xc6\x1f\x70\xa1\x4e\xd4\x1d\x6a\xf6\xf4\x23\x26\x3d\x95\x49\xbf\x9f\xff\x17\xab\x03\xd7\x1f\xdc\x27\x93\x8e\xdc\x76\x74\xfc\x19\x00\x00\xff\xff\xa8\x47\x9e\x94\x8d\x08\x00\x00")

func TemplatesClient_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_resourceTmpl,
		"../templates/client_resource.tmpl",
	)
}

func TemplatesClient_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_resource.tmpl", size: 2189, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesGeneric_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4f\xcd\x4b\x2d\xca\x4c\x8e\xcf\x4d\xcc\xcc\x8b\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x00\x49\x70\x71\xa5\x95\xe6\x25\x83\x99\x1a\x9a\xd5\x5c\x5c\xb5\x5c\xd5\xd5\xa9\x79\x29\x40\x55\x80\x00\x00\x00\xff\xff\xdc\x57\x73\x81\x49\x00\x00\x00")

func TemplatesGeneric_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesGeneric_mainTmpl,
		"../templates/generic_main.tmpl",
	)
}

func TemplatesGeneric_mainTmpl() (*asset, error) {
	bytes, err := TemplatesGeneric_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/generic_main.tmpl", size: 73, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\xcb\x4e\xc3\x30\x10\x45\xf7\xfe\x8a\x91\xd5\x45\x2b\xaa\x88\x75\xa5\x2e\xda\x0a\x24\x24\x40\x55\x79\x6c\x2d\x93\x4c\x1a\x8b\xc4\x09\x63\xa7\x08\x05\xff\x3b\xe3\x04\x42\x5a\x2f\x62\x67\x1e\x77\x8e\xaf\xbb\x0e\x32\xcc\x8d\x45\x90\xcd\x97\x2f\x6a\xab\xd2\xd2\xa0\xf5\xca\x63\xd5\x94\xda\xa3\x84\x10\x84\xa9\x9a\x9a\x3c\x10\x7e\xb4\xe8\xbc\x13\x62\xbb\x79\xba\x51\x2f\x87\x3b\x58\x83\xec\xba\x64\xab\x1d\xf2\x5f\x08\x52\x88\xb4\xd4\xce\xc1\xae\x57\x59\x09\xe0\xc5\x03\x40\x29\x63\x8d\x57\x6a\xee\xb0\xcc\x97\x2d\x95\x8b\x21\x17\x57\x0c\x25\x1c\x62\xb1\x3f\x5d\x21\x18\x8c\xb4\x3d\x22\xcc\xde\x97\x30\x3b\xc1\x6a\x0d\xc9\xbe\x27\x7c\x40\xfe\x66\x2e\x72\x8d\xf2\x5d\x37\x3b\x25\x43\xe2\x51\x57\x18\xc2\xbc\x8f\xec\x35\xe9\xca\x85\x30\x19\xc6\xf1\xb4\xae\x2a\x86\x2b\xd1\x1e\x7d\x11\x85\xf9\xc4\x23\x92\xdb\xd6\xa6\xbb\x21\xc7\x3d\x93\x0e\x93\x03\x1b\x74\xd1\x77\xcd\x00\x52\xca\x49\xd9\x08\x9c\x47\xe2\x3c\x2a\x5f\xa8\x72\x4b\xe4\xca\xe3\x86\x36\x9b\x0c\x39\x57\x3a\xcf\xb5\x64\xd8\x9a\xfe\x42\x07\x74\x75\x4b\x29\xee\xb5\x2f\x26\x15\x84\xbe\x25\x3b\xbe\x4f\xd2\xd7\xbe\x22\xbd\xc1\x37\x3c\xd7\xf7\xf5\x27\x12\x5b\x32\xfa\x7c\x15\x25\x07\x83\x0e\x1b\x3a\xf2\x65\x97\x05\xea\x0c\xc9\xad\x7f\xf7\x45\xf4\x9f\x29\x7a\x93\xff\x8f\x3f\x01\x00\x00\xff\xff\xec\x3f\x64\x60\x2e\x02\x00\x00")

func TemplatesPython_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_clientTmpl,
		"../templates/python_client.tmpl",
	)
}

func TemplatesPython_clientTmpl() (*asset, error) {
	bytes, err := TemplatesPython_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client.tmpl", size: 558, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_client_utilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x65\x0f\xc5\xc6\xed\xa1\x57\x83\xe8\x1b\x94\x96\x1c\x43\x30\x4e\xbc\x4e\x96\xc8\xeb\x58\x3f\x07\x23\xfc\xee\x91\x1c\x43\x3c\x07\x21\xcd\xa7\x99\x65\x63\xec\xa8\x67\x21\xc0\xc7\xec\x6f\xa3\x34\x17\xc3\x24\xbe\x09\x9e\x8d\xc3\x65\x51\x09\xc3\x39\xb0\xe9\xfe\x03\xd9\xf9\xe0\x2d\xcb\xb5\x98\xf2\xfd\xaf\xb5\xed\xe0\xf4\xef\x28\x54\xd6\x0a\x92\xb8\x87\x1d\x01\x76\x90\xe1\x8b\x65\x59\xf2\xc1\x0a\x20\xaa\xd5\x9a\x1c\x68\xc0\x1f\x5c\x1f\xfd\x68\xe1\x4e\xf3\x27\x90\xa1\x01\x58\xf6\x4d\xef\x86\x14\xa9\x74\xfe\x07\x15\xa0\xc6\x74\x3a\x6f\x8b\x1c\x29\xb3\xf3\xb1\x35\x6f\x83\x26\x77\xac\xbf\xbe\x4f\x2a\x46\x92\x2e\xed\xf2\x0c\x00\x00\xff\xff\xe8\x33\x27\xf9\xed\x00\x00\x00")

func TemplatesPython_client_utilsTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_client_utilsTmpl,
		"../templates/python_client_utils.tmpl",
	)
}

func TemplatesPython_client_utilsTmpl() (*asset, error) {
	bytes, err := TemplatesPython_client_utilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client_utils.tmpl", size: 237, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\xc1\x6a\xeb\x30\x10\x45\xd7\xd6\x57\x0c\x22\x0b\x19\x82\x92\x65\x08\xbc\x45\xe0\x6d\x02\x25\x84\xf4\x03\x82\x6a\x8f\x1d\x11\x6b\x64\x46\xe3\xb4\x20\xfc\xef\x95\x5d\x68\x57\x42\xba\x67\x8e\xe6\xe6\xdc\x62\xe7\x09\x41\x27\xe4\x17\xf2\x3d\x38\x4f\x77\xc1\x30\x0e\x4e\x50\xcf\xb3\x1a\x5d\xf3\x74\x3d\xc2\x12\x28\xe5\xc3\x18\x59\xc0\xa8\x4a\x0f\xb1\xd7\xe5\x20\x94\xdd\x43\x64\xd4\xaa\x5c\x7a\x2f\x8f\xe9\xc3\x36\x31\xec\xfa\xc8\x7e\x18\xdc\x2e\x4c\x5f\x5a\xd5\x4a\x75\x13\x35\xab\xc4\xd4\x90\x55\xc5\x70\xfc\x07\x25\xb3\x17\xfc\xbc\xc5\x49\x90\x4d\x81\xaa\x9c\x81\x1d\x95\xef\x36\xcf\x2d\x6c\x5e\x0b\x64\x6f\x98\xe2\xc4\x0d\xa6\xff\xd8\x41\xd9\xa8\x40\xf6\xe2\x02\xce\xf3\x99\xca\x5c\xe7\x1a\x5c\x0d\xc9\xf0\x16\x7e\xb3\xd3\xf5\x9c\xe7\x7a\x35\x22\xb5\xcb\x9c\xaa\xca\xca\xf6\xca\x9e\x64\x20\xa3\x93\x38\x16\x4f\x3d\xfc\x34\xd7\x85\x5d\x7a\xd8\x37\x9f\x04\xe9\x44\xed\xfb\xf2\x6e\xf4\xf1\xb0\x3f\xec\xf5\x16\xb8\x56\xc5\xf1\xa7\xfb\x0e\x00\x00\xff\xff\xf3\x14\x20\xaa\x3b\x01\x00\x00")

func TemplatesServer_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_mainTmpl,
		"../templates/server_main.tmpl",
	)
}

func TemplatesServer_mainTmpl() (*asset, error) {
	bytes, err := TemplatesServer_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_main.tmpl", size: 315, mode: os.FileMode(420), modTime: time.Unix(1455091190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_apiTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x52\xcd\x8e\xd3\x30\x10\x3e\xc7\x4f\x31\x58\x15\x4a\x50\xe5\xee\x81\x13\xab\x3d\x80\x00\x01\x12\x65\x61\x25\x38\xae\x4c\x33\xdd\x86\x26\x76\x32\x71\x1a\x55\x56\xde\x9d\x19\x27\xa5\x6c\x4e\xf6\xf8\xfb\xf3\xe7\xc4\x58\xe2\xbe\x72\x08\x9a\xb0\xf7\x03\xed\xf0\xd1\xb6\xd5\x63\xc0\xa6\xad\x6d\x40\x3d\x4d\xaa\xb5\xbb\xa3\x7d\x42\x68\x6c\xe5\x94\xaa\x9a\xd6\x53\x80\x5c\x65\x31\x42\xb5\x07\xb3\x45\x2c\xbf\x3c\x7c\xdb\xc2\x34\x69\x74\x3b\x5f\x56\xee\x69\xf3\xa7\xf7\x4e\x33\x00\x5d\xc9\x73\x95\x69\x87\x61\x73\x08\xa1\xd5\xaa\x50\x31\xae\xd8\x63\x6b\x1b\x84\x37\x77\x2c\xc0\x0b\xc6\x84\x73\x8b\x10\xe3\xb2\x7d\x7b\xff\x19\xfa\x40\xc3\x2e\x40\x54\x93\x52\x4c\x02\xb2\x8e\x63\xac\x8e\x6b\x58\x9d\x12\xf3\x2b\x86\x83\x2f\x7b\x71\xd8\x0f\x6e\x97\xb3\x2a\x5c\xc5\x93\x48\x21\x83\xd3\x82\x9c\xa7\xf9\x08\x92\xc4\xfc\xc0\xbe\xf5\xae\xc7\x5f\x54\x05\xa4\x35\x10\xbc\x5a\xe6\xdd\x80\x7d\x60\xa6\xdc\xf1\x62\xda\x89\x6b\x27\xb6\x2c\xf7\x7d\x40\x3a\xdf\x5b\x62\x3d\xa6\xf6\xec\x0f\xfc\x6d\x36\x62\x76\xec\xa6\x49\x60\x84\x9d\xf9\xe8\xa9\xf9\x69\xeb\x01\x73\xbd\x9c\xe8\x42\x44\xb9\x16\x69\x25\x46\x29\x90\xfd\xde\xf9\xf2\x2c\x83\x93\x25\xe1\xc9\x56\xaa\xb8\x9e\xa8\x8c\x91\x48\x24\xc2\xd2\x2d\xb7\x3e\xbe\x47\x2e\x1b\x29\x27\x23\xa0\xc2\xcc\xfb\xfc\xe5\x22\x50\xdc\x26\xc2\x8b\x3b\x70\x55\x2d\x77\xc9\x46\x93\xae\xfa\x09\xad\xd0\x5e\xdf\xdc\x70\x96\x8c\x30\x0c\xe4\x54\x96\xe2\x5c\xde\xeb\xdf\xe3\x4a\x47\x29\xcd\x35\xdd\x32\x48\xf1\xe6\xb5\x9c\x5d\x42\x7d\x70\x73\xa8\xb1\x30\xf3\x32\xbf\x30\x8a\xdb\xe7\x0e\xdc\x16\xbf\x99\x6f\x1a\x74\x01\x7e\x63\xed\x47\xa8\xe5\x47\x0c\x1e\x6c\x59\xc2\x21\xa5\x4c\xb0\xd1\xcc\x91\xcd\x03\x86\x5c\x1f\xf1\xac\xd7\xfa\x24\xad\x72\x99\x93\xfa\x4f\xf3\xba\xfc\x1b\x00\x00\xff\xff\xd9\x3a\xb5\x14\xd7\x02\x00\x00")

func TemplatesServer_resources_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_apiTmpl,
		"../templates/server_resources_api.tmpl",
	)
}

func TemplatesServer_resources_apiTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_api.tmpl", size: 727, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_interfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3f\x4f\xf3\x30\x10\xc6\xe7\xf8\x53\x9c\xa2\x0e\x49\x55\x39\xfb\x2b\xbd\x13\x02\xc1\x00\x43\x07\x18\x2b\x37\xb9\xb4\x56\xe3\x3f\xd8\x97\x0a\x64\xf9\xbb\x73\x2e\xad\x40\x50\x89\xcd\xf1\xfd\xf2\xdc\xf3\x73\x4a\x03\x8e\xda\x22\xd4\x01\xa3\x9b\x43\x8f\x1b\x3d\x6e\x08\x8d\x9f\x14\x61\x9d\xb3\xf0\xaa\x3f\xa8\x1d\x82\x51\xda\x0a\xa1\x8d\x77\x81\xa0\x11\x55\xbd\xd3\xb4\x9f\xb7\xb2\x77\xa6\xdb\xb9\xa0\xa7\x49\x75\x66\x7e\xab\x79\x62\x91\xba\x3d\x91\xaf\x45\x2b\x04\xbd\x7b\x84\x94\xe4\x93\x32\x98\xf3\x83\x25\x0c\xa3\xea\x11\xf4\xe5\x94\x44\x95\x12\x04\x65\x79\xc9\xe2\xb0\x82\xc5\x11\xfe\xfd\x07\xf9\x88\xb4\x77\x43\x04\xae\x50\x01\x7c\x23\xc6\x82\x8c\x85\x59\x1c\xe5\xdd\x6c\xfb\x1b\x67\x0c\x5a\x8a\x39\x77\x1d\x83\x3c\xcc\x39\x25\xb4\x43\xf9\xb5\x2a\x17\xe7\xb0\xcf\x0a\x4d\xa9\x26\xd7\x18\xbd\xb3\x11\x5f\x82\xe6\x1e\x2b\x58\x9e\x6f\x5f\x67\x8c\xd4\x9e\x2a\x71\x42\xd9\x9e\x85\x18\x79\xcb\x15\x87\xb5\x9b\x09\x63\x13\x60\xc9\xe2\xf2\xf4\xc5\x49\xfa\x0a\xd9\xb2\xc1\xdf\x9a\x55\x90\xf7\xca\x0e\x13\x16\xab\xa6\x3e\x35\xbf\xb5\x83\x77\xfc\x56\x39\xd7\x1c\x2d\x7f\xd9\xb4\x97\x84\x33\xff\x8c\x61\xcb\xec\x0f\x83\xaf\xf3\x47\x00\x00\x00\xff\xff\xfe\xc2\xc2\xf5\xf1\x01\x00\x00")

func TemplatesServer_resources_interfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_interfaceTmpl,
		"../templates/server_resources_interface.tmpl",
	)
}

func TemplatesServer_resources_interfaceTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_interfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_interface.tmpl", size: 497, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xb1\x0a\x83\x30\x10\x40\xf7\x7c\xc5\x11\x1c\x4b\xdc\x85\x6e\xa5\x63\xe9\xd0\xbd\x06\x3d\x4b\xaa\xc6\x60\x62\x41\x8e\xfb\xf7\x5e\xb4\x42\x33\x5d\x78\x79\xef\x42\xd4\x62\xe7\x3c\x82\x8e\x69\x5e\x9a\xf4\x4c\x38\x86\xc1\x26\xd4\xcc\x2a\xd8\xa6\xb7\x2f\x04\x22\x73\xdf\xc7\x9b\x1d\x51\x80\x22\x72\x1d\x88\x55\x98\x0b\xc6\x66\x76\x21\xb9\xc9\x83\xd6\xc0\x5c\x96\x44\xe8\x5b\xe6\xac\xfd\x51\xd1\xd2\x1a\x72\x0c\x4c\xce\xc8\x53\xd8\x77\x02\x29\x90\x23\x60\xb6\x5e\xd6\x15\x3d\xae\x27\x28\x3e\x76\x58\x10\xaa\x33\x98\xab\xc3\xa1\x8d\x22\x10\x65\xb6\xa5\x77\x6c\x1e\x92\x94\x7b\xfd\x8e\x93\xaf\xf4\xc1\x75\xfd\x2b\x6e\x1f\x51\xac\x8e\xe9\x1b\x00\x00\xff\xff\xce\xf5\x03\x0b\xef\x00\x00\x00")

func TemplatesStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesStructTmpl,
		"../templates/struct.tmpl",
	)
}

func TemplatesStructTmpl() (*asset, error) {
	bytes, err := TemplatesStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/struct.tmpl", size: 239, mode: os.FileMode(420), modTime: time.Unix(1455546557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../templates/client_helper_resource.tmpl": TemplatesClient_helper_resourceTmpl,
	"../templates/client_resource.tmpl": TemplatesClient_resourceTmpl,
	"../templates/generic_main.tmpl": TemplatesGeneric_mainTmpl,
	"../templates/python_client.tmpl": TemplatesPython_clientTmpl,
	"../templates/python_client_utils.tmpl": TemplatesPython_client_utilsTmpl,
	"../templates/server_main.tmpl": TemplatesServer_mainTmpl,
	"../templates/server_resources_api.tmpl": TemplatesServer_resources_apiTmpl,
	"../templates/server_resources_interface.tmpl": TemplatesServer_resources_interfaceTmpl,
	"../templates/struct.tmpl": TemplatesStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"client_helper_resource.tmpl": &bintree{TemplatesClient_helper_resourceTmpl, map[string]*bintree{}},
			"client_resource.tmpl": &bintree{TemplatesClient_resourceTmpl, map[string]*bintree{}},
			"generic_main.tmpl": &bintree{TemplatesGeneric_mainTmpl, map[string]*bintree{}},
			"python_client.tmpl": &bintree{TemplatesPython_clientTmpl, map[string]*bintree{}},
			"python_client_utils.tmpl": &bintree{TemplatesPython_client_utilsTmpl, map[string]*bintree{}},
			"server_main.tmpl": &bintree{TemplatesServer_mainTmpl, map[string]*bintree{}},
			"server_resources_api.tmpl": &bintree{TemplatesServer_resources_apiTmpl, map[string]*bintree{}},
			"server_resources_interface.tmpl": &bintree{TemplatesServer_resources_interfaceTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{TemplatesStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

