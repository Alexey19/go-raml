// Code generated by go-bindata.
// sources:
// ../templates/client_helper_resource.tmpl
// ../templates/client_resource.tmpl
// ../templates/generic_main.tmpl
// ../templates/python_client.tmpl
// ../templates/server_main.tmpl
// ../templates/server_resources_api.tmpl
// ../templates/server_resources_interface.tmpl
// ../templates/struct.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesClient_helper_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x6e\x9b\x40\x10\x3d\xb3\x5f\x31\xe5\x12\xa8\x28\x56\xa5\xaa\x87\x48\xb9\xa4\x95\xd5\x1c\xda\x83\x7d\xe8\xa1\xaa\xa2\x35\x0c\x86\x06\xef\xe2\xd9\xc1\x91\x85\xf8\xf7\xee\x0e\xd8\x69\xdc\x44\xca\xc5\x5a\xcf\xbc\x37\xf3\xde\xdb\x65\x18\x4a\xac\x1a\x83\x10\x17\x6d\x83\x86\xef\x6b\x6c\x3b\xa4\x7b\x42\x67\x7b\x2a\xd0\xc5\xe3\xa8\x3a\x5d\x3c\xe8\x2d\xc2\x04\x51\xaa\xd9\x75\x96\x18\x12\x15\xc5\x9b\x23\x7b\x8c\x3f\xa0\x29\x6c\xd9\x98\xed\xe2\x8f\xb3\x26\x14\x1a\x1b\x7e\x0d\xf2\xa2\x66\xee\xc2\xd9\x31\x15\xd6\x1c\x62\x95\x2a\x55\xf5\xa6\x00\xe1\xe0\xad\x2d\x8f\x49\xa9\x59\x43\x63\x18\xa9\xd2\x05\x0e\x63\x0a\x49\x63\xf3\x15\xea\x12\x29\x03\x24\xb2\x94\xc2\xa0\xa2\x8d\xfc\x81\xeb\x1b\x08\x7b\xf2\xef\x9a\x5c\xad\x5b\xa1\xa7\x2a\x6a\x2a\xe9\xbe\xbb\x01\xd3\xb4\x01\x1e\x11\x72\x4f\x26\xfc\x15\xa2\x8a\x46\x75\xaa\x89\xf4\xfc\x07\x3e\x4e\x5b\x92\x4d\x9a\x05\x9c\x1a\x67\x75\xa5\x5d\xe1\xfe\x67\xc3\xb5\x08\xdc\x21\xd7\xb6\xcc\xa0\xa7\x76\xcd\x04\xde\x8b\x37\x9b\xc1\xa5\xee\x6c\x0e\x09\x82\xe9\xfc\x8b\x9c\x33\xa8\x65\x83\x83\x9d\xee\x7e\x4d\xcc\xdf\xcf\xbd\xbe\x17\xf8\x0a\x5d\x67\x8d\xc3\x67\x86\xfd\xf2\xb3\xe7\x8b\xc0\xde\xea\x58\x45\x8b\x05\x14\x84\x9a\x11\xb8\x46\x20\xdc\xf7\xe8\x38\x24\xb1\x3f\xcf\x16\x05\x92\x86\x34\x2f\x0c\x67\x10\x84\xbc\x7d\x61\x65\x09\x1e\x32\x38\x84\xc9\xa4\x8d\x7f\x3c\xa7\x0c\x02\x25\x0a\x12\xf2\x6f\x52\xc9\xd7\xc8\x89\x87\x6e\x91\xd7\x12\xcd\x92\xec\xee\xee\x94\x4e\x72\x48\xd3\x69\xe2\xbc\x66\x8a\x37\xff\x6a\x13\x3f\x22\x3d\x5f\xd6\x2b\xec\xff\x9f\xd5\x14\x7f\x50\xe1\x1e\x1b\x2e\x6a\xb9\xc1\x3c\xe1\x63\x87\x92\x77\xa1\x1d\xce\xa0\xeb\x27\x73\x13\x68\x2a\xa7\x33\xc8\x8f\x0d\x88\x32\x58\x9c\xfa\xbe\x92\x3e\x71\xe6\xe7\x9e\xdf\xb1\xd5\x49\x79\x62\x55\xad\xd5\xfc\xf9\xd3\x05\x73\xae\xbe\xc0\x5e\x5a\xda\x69\x5e\x86\x7e\xe2\x6f\xe3\xaa\xba\xca\xe0\xc3\xc7\x0c\x04\x2c\x13\x37\xd6\xb6\x17\xe3\x42\xe9\xd5\x59\xb7\xbe\x29\x7a\xfc\x97\xaf\xfb\x96\xff\xb1\x19\xc7\x92\xf5\xa8\x86\x01\x4d\xe9\xbf\xfc\xbf\x01\x00\x00\xff\xff\x14\x5b\x4d\x84\x1f\x04\x00\x00")

func TemplatesClient_helper_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_helper_resourceTmpl,
		"../templates/client_helper_resource.tmpl",
	)
}

func TemplatesClient_helper_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_helper_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_helper_resource.tmpl", size: 1055, mode: os.FileMode(420), modTime: time.Unix(1455241654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesClient_resourceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4d\x4f\xdb\x40\x10\x3d\x7b\x7f\xc5\xd4\x8a\x2a\x9b\x46\xce\xbd\x52\x2e\x94\xb4\x45\xa2\x08\x05\x68\x8f\xd5\xb2\x9e\x10\x03\xd9\x35\xeb\x75\x10\x72\xfd\xdf\x3b\xb3\x6b\x3b\x6e\x68\x91\x8a\xd4\xf6\x52\x4e\xcb\x7c\xbd\x37\x6f\xc6\x93\xa6\xc9\x71\x55\x68\x84\x58\xdd\x15\xa8\xdd\x57\x8b\x95\xa9\xad\xc2\xb8\x6d\x45\x29\xd5\xad\xbc\x46\x08\x2e\x21\x8a\x4d\x69\xac\x83\x44\x44\xb1\x46\x37\x5b\x3b\x57\xc6\x22\x8a\x62\xd4\xca\xe4\x85\xbe\x9e\xdd\x54\x46\xc7\x22\x15\x42\x19\x5d\xf9\x40\x6b\x8c\xbb\x5c\x9e\xc0\x1c\xe2\xa6\xc9\x0e\x65\x85\x97\xcb\xe3\xb6\xf5\x41\x4d\x33\x91\x65\x71\x2a\x37\x08\x6f\xe7\x90\xf1\x83\x40\xdd\x63\x89\x40\xb1\xe1\x5f\xa8\x9c\xad\x95\x83\x46\x44\x81\x05\x30\x6a\xf6\x2e\x30\x6a\x85\x58\xd5\x5a\xc1\x29\x3e\x0c\x19\x49\x0a\x07\xbb\x74\xce\xe3\xea\x1a\x1f\x92\xc1\x9a\x92\x31\xeb\xca\xcd\xc7\x05\x9b\x96\x18\xa3\xab\xad\x06\xc5\xc5\x9b\x06\xac\xd4\xa4\xc0\xe4\x76\x0a\x93\xad\xa7\xf9\x09\xdd\xda\xe4\x15\x10\x55\xc6\x4e\x14\xc3\xf5\x8d\x50\x6d\xe2\x3e\xd9\x76\x51\x1d\xa3\x91\xe5\x4c\x5a\xb9\xa1\xa8\x60\x5b\x62\x55\x1e\x9a\xfc\x91\x89\x36\xc5\x8a\x58\xc2\xc8\x0a\x71\x4c\x28\x53\x72\xa1\xce\xdb\xf6\xc0\x13\x65\x27\x89\x8b\x53\xb4\xd6\xd8\x94\x1b\xf4\xa9\x78\xcf\xa9\x9f\xd1\x5e\x41\xfc\x61\x71\xc1\xe3\x8b\xa2\x5f\x16\x85\xad\xb4\x50\xc3\x53\x12\x1e\x49\x50\xea\x6c\x06\xca\xa2\x74\x08\x16\xef\x6b\xa4\x69\x9a\xab\x1b\x54\x8e\x5c\x64\x98\x02\xc1\xb3\x1c\x9e\x13\xc9\xbf\x0c\x41\x89\xc7\x9e\x42\x3f\xf6\x1f\x09\xf8\xc5\x3a\x93\x6e\xdd\x91\x78\xd3\x03\x0e\x44\x86\x08\xee\x5b\x17\x77\x34\xa9\x88\x9b\x23\xb0\x57\x73\x36\x70\xbf\xcf\xf5\xd5\x4d\xaf\xf6\xd9\x9e\x65\x88\xc7\xbb\x0a\x77\xee\x3d\x9f\xef\x39\x8a\x7c\xdf\x2b\x63\x81\x86\xed\x67\x1d\x66\xbf\x46\x99\xa3\xad\x08\x19\xfa\x3f\x52\x20\xfb\xe8\xcd\xd9\x39\xba\x84\xe2\xaf\xd1\x9d\x3b\x4b\xdf\xc0\x7b\x6b\x36\xc7\xda\xa1\x5d\x49\x85\xc9\x36\x4d\x7d\x56\x27\x69\x6e\xc0\xad\x07\x45\xbd\x94\x55\x39\x68\xd9\xef\x64\x76\x64\x12\x0a\xf9\xcb\xbd\x47\x11\x5d\x02\xb4\xc0\x94\x32\xae\x4a\xdf\x84\xa9\x30\x49\xc5\x73\x8b\xc4\x55\x76\xb8\xa1\x1d\xbe\x02\xbc\x13\x47\x48\x67\x01\x6d\x32\x54\x4c\xb3\x60\x4a\x5e\xd7\xa9\xd8\x31\x1b\xd5\x08\x05\x88\xa2\xd8\x91\x13\x5d\x20\xec\x6d\xf9\xd1\xe2\x64\x71\xb1\x08\x8b\xfe\xd2\x6d\xed\x6a\x0c\x0b\xfb\x87\xf6\xf5\xa9\xf4\xff\x64\xd7\xc2\x61\xdb\xdf\x32\x31\x1e\xc4\xcb\x2f\x46\xe0\x3a\x5a\xe7\xdc\x90\xcc\x5f\x0a\xb7\xe6\xd0\x24\xf6\x99\x3c\x39\xba\xfe\xbf\xab\xf7\x4f\xe5\xee\x8c\xf7\x9e\xe3\x37\xb8\x30\x27\xe6\x01\x2d\x7b\xfa\x16\xa7\xbd\x9e\xff\x3f\xa5\x8e\x5c\xff\x68\xf9\xa7\x8d\x9e\x0c\x3b\x7a\x7e\x0f\x00\x00\xff\xff\x18\x15\xef\x68\x0e\x08\x00\x00")

func TemplatesClient_resourceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesClient_resourceTmpl,
		"../templates/client_resource.tmpl",
	)
}

func TemplatesClient_resourceTmpl() (*asset, error) {
	bytes, err := TemplatesClient_resourceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/client_resource.tmpl", size: 2062, mode: os.FileMode(420), modTime: time.Unix(1455241654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesGeneric_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4f\xcd\x4b\x2d\xca\x4c\x8e\xcf\x4d\xcc\xcc\x8b\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x00\x49\x70\x71\xa5\x95\xe6\x25\x83\x99\x1a\x9a\xd5\x5c\x5c\xb5\x5c\xd5\xd5\xa9\x79\x29\x40\x55\x80\x00\x00\x00\xff\xff\xdc\x57\x73\x81\x49\x00\x00\x00")

func TemplatesGeneric_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesGeneric_mainTmpl,
		"../templates/generic_main.tmpl",
	)
}

func TemplatesGeneric_mainTmpl() (*asset, error) {
	bytes, err := TemplatesGeneric_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/generic_main.tmpl", size: 73, mode: os.FileMode(420), modTime: time.Unix(1455091345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesPython_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\x4b\x4e\xc3\x30\x10\x86\xd7\xf1\x29\x46\x51\x16\xad\x88\x72\x80\x4a\x59\xb4\x88\x05\x12\xa0\xaa\x3c\xb6\x96\x69\xa6\xad\x85\xe3\x84\xb1\x53\x84\x8c\xef\xce\xd8\x81\x76\x16\x7e\xfc\x63\x7d\xf3\x39\x04\xe8\xf0\xa0\x2d\x42\x39\x7e\xfb\xd3\x60\xe5\xde\x68\xb4\x5e\x7a\xec\x47\xa3\x3c\x96\x10\xa3\xd0\xfd\x38\x90\x07\xc2\xcf\x09\x9d\x77\x42\x6c\xd6\xcf\x77\xf2\x75\x77\x0f\x2d\x94\x21\x34\x1b\xe5\x90\x6f\x31\x96\x42\xec\x8d\x72\x0e\x6e\x33\x65\x25\x80\x8b\x07\x80\x94\xda\x6a\x2f\xe5\xc2\xa1\x39\xd4\x13\x99\xe5\xdc\x4b\x95\xa2\x86\x23\x86\xfd\x73\x85\x60\x31\x52\xf6\x88\x50\x7d\xd4\x50\x9d\x61\xd5\x42\xb3\xcd\x86\x8f\xc8\x6b\xe7\x92\x97\x28\x12\x3b\x84\xea\xdc\xcc\xe9\x93\xea\x31\xc6\x45\x4e\xb6\x8a\x54\xef\x62\xe4\x49\x45\x31\x91\x66\x7c\xce\x19\xbf\xa6\x23\x37\x38\x26\xf4\x13\xd9\xcb\xc7\x9a\xfc\xe0\x0d\xe9\x1d\x7e\xe0\x65\x78\x18\xbe\x90\x18\x77\x11\xbc\x01\xe6\xcc\xf0\xdd\xcc\xa8\x4f\xa8\x3a\x24\xd7\xfe\xed\xcb\x24\x8e\xb6\xcb\x76\xd7\xe3\x6f\x00\x00\x00\xff\xff\x71\xc4\x72\x1f\x67\x01\x00\x00")

func TemplatesPython_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesPython_clientTmpl,
		"../templates/python_client.tmpl",
	)
}

func TemplatesPython_clientTmpl() (*asset, error) {
	bytes, err := TemplatesPython_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/python_client.tmpl", size: 359, mode: os.FileMode(420), modTime: time.Unix(1455241654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\xc1\x6a\xeb\x30\x10\x45\xd7\xd6\x57\x0c\x22\x0b\x19\x82\x92\x65\x08\xbc\x45\xe0\x6d\x02\x25\x84\xf4\x03\x82\x6a\x8f\x1d\x11\x6b\x64\x46\xe3\xb4\x20\xfc\xef\x95\x5d\x68\x57\x42\xba\x67\x8e\xe6\xe6\xdc\x62\xe7\x09\x41\x27\xe4\x17\xf2\x3d\x38\x4f\x77\xc1\x30\x0e\x4e\x50\xcf\xb3\x1a\x5d\xf3\x74\x3d\xc2\x12\x28\xe5\xc3\x18\x59\xc0\xa8\x4a\x0f\xb1\xd7\xe5\x20\x94\xdd\x43\x64\xd4\xaa\x5c\x7a\x2f\x8f\xe9\xc3\x36\x31\xec\xfa\xc8\x7e\x18\xdc\x2e\x4c\x5f\x5a\xd5\x4a\x75\x13\x35\xab\xc4\xd4\x90\x55\xc5\x70\xfc\x07\x25\xb3\x17\xfc\xbc\xc5\x49\x90\x4d\x81\xaa\x9c\x81\x1d\x95\xef\x36\xcf\x2d\x6c\x5e\x0b\x64\x6f\x98\xe2\xc4\x0d\xa6\xff\xd8\x41\xd9\xa8\x40\xf6\xe2\x02\xce\xf3\x99\xca\x5c\xe7\x1a\x5c\x0d\xc9\xf0\x16\x7e\xb3\xd3\xf5\x9c\xe7\x7a\x35\x22\xb5\xcb\x9c\xaa\xca\xca\xf6\xca\x9e\x64\x20\xa3\x93\x38\x16\x4f\x3d\xfc\x34\xd7\x85\x5d\x7a\xd8\x37\x9f\x04\xe9\x44\xed\xfb\xf2\x6e\xf4\xf1\xb0\x3f\xec\xf5\x16\xb8\x56\xc5\xf1\xa7\xfb\x0e\x00\x00\xff\xff\xf3\x14\x20\xaa\x3b\x01\x00\x00")

func TemplatesServer_mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_mainTmpl,
		"../templates/server_main.tmpl",
	)
}

func TemplatesServer_mainTmpl() (*asset, error) {
	bytes, err := TemplatesServer_mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_main.tmpl", size: 315, mode: os.FileMode(420), modTime: time.Unix(1455091345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_apiTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x92\xcf\x8e\xd3\x30\x10\xc6\xcf\xf1\x53\x0c\x56\x85\x12\x54\xa5\x7b\xe0\xc4\x6a\x0f\x20\x90\x00\x89\x82\xd8\x03\xc7\x95\x89\xa7\x5b\xd3\xc4\x0e\x93\x49\xa3\xca\xca\xbb\x33\x76\x52\x0a\xb7\x99\xcf\xf3\xe7\x37\x5f\x12\xa3\xc5\x83\xf3\x08\x9a\x70\x08\x23\x35\xf8\x64\x7a\xf7\xc4\xd8\xf5\xad\x61\xd4\xf3\xac\x7a\xd3\x9c\xcc\x33\x42\x67\x9c\x57\xca\x75\x7d\x20\x86\x52\x15\x31\x82\x3b\x40\xbd\x47\xb4\x9f\x1f\xbf\xee\x61\x9e\x35\xfa\x26\x58\xe7\x9f\x77\xbf\x86\xe0\xb5\x14\xa0\xb7\xa2\xab\x42\x7b\xe4\xdd\x91\xb9\xd7\xaa\x52\x31\x6e\x64\xc7\xde\x74\x08\x6f\x1e\x64\x80\x04\x52\xc3\x97\x1e\x21\xc6\x35\x7d\xfb\xed\x13\x0c\x4c\x63\xc3\x10\xd5\xac\x94\x34\x01\x19\x2f\x18\x9b\xd3\x16\x36\xe7\xdc\xf9\x05\xf9\x18\xec\x90\x36\x1c\x46\xdf\x94\x32\x15\x6e\xc3\xf3\x90\x2a\x09\xe7\xb5\x72\x51\xcb\x09\x12\x49\xfd\x1d\x87\x3e\xf8\x01\x7f\x90\x63\xa4\x2d\x10\xbc\x5a\xf5\xdf\x23\x0e\x2c\x9d\xe9\xc6\x74\xa2\x28\xef\x82\xbd\xa4\x43\xce\x86\x80\x96\x34\xc1\xde\x5e\x54\x21\x95\x48\x94\xc0\xd2\xf5\xe2\xcb\xf4\x1e\xc5\x0e\xa4\x92\xea\x54\x54\xd5\x4b\x5e\xbe\x5c\x07\x54\xf7\xb9\xe1\xc5\x03\x78\xd7\xa6\x6d\xc5\x54\x67\x98\x8f\x68\x52\xdb\xeb\xbb\xbb\x4a\x44\x42\x1e\xc9\xab\x62\xce\x96\xaf\x8e\xfe\xb5\x3f\x5d\x91\x69\x6e\x74\xab\x90\xf1\x96\x38\xbd\x5d\xa1\x3e\xf8\x05\x6a\xaa\xea\x25\x2c\xaf\x1d\xd5\xfd\xff\x1b\x76\x3b\x10\x57\x43\xd7\xa1\x67\xf8\x89\x6d\x98\xa0\x4d\xbf\x0a\x07\x30\xd6\xc2\x31\x53\xe6\xb2\xa9\x5e\x90\xeb\x47\xe4\x52\x9f\xf0\xa2\xb7\xfa\x6c\xda\x11\x75\x25\x1f\xef\x9f\x99\xb7\xf0\x4f\x00\x00\x00\xff\xff\x8c\x09\x98\xbe\x79\x02\x00\x00")

func TemplatesServer_resources_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_apiTmpl,
		"../templates/server_resources_api.tmpl",
	)
}

func TemplatesServer_resources_apiTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_api.tmpl", size: 633, mode: os.FileMode(420), modTime: time.Unix(1455241654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesServer_resources_interfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xbd\x4e\x03\x31\x10\x84\xeb\xec\x53\xac\xac\x14\x77\x51\xe4\xf4\x48\x94\x20\x28\xa0\x48\x01\x65\xe4\xdc\xed\x25\x56\xce\x3f\xd8\xeb\x08\x64\xf9\xdd\x31\xc7\x45\x48\x90\x82\x6e\x3d\x1e\x7d\x33\x93\x73\x4f\x83\xb6\x84\x22\x50\x74\x29\x74\xb4\xd3\xc3\x8e\xc9\xf8\x51\x31\x89\x52\xc0\xab\xee\xa4\x0e\x84\x46\x69\x0b\xa0\x8d\x77\x81\xb1\x81\x85\x38\x68\x3e\xa6\xbd\xec\x9c\xd9\x1c\x5c\xd0\xe3\xa8\x36\x26\xbd\x8b\xfa\x63\x89\x37\x47\x66\x2f\xa0\x05\xe0\x0f\x4f\x98\xb3\x7c\x56\x86\x4a\x79\xb4\x4c\x61\x50\x1d\xa1\xbe\x5c\x19\x16\x39\x63\x50\xb6\x86\x2c\x4f\x6b\x5c\x9e\xf1\xe6\x16\xe5\x13\xf1\xd1\xf5\x11\x4b\x41\x58\x54\xc7\xf2\x3c\x4b\xdf\xa0\xe6\x2b\x40\x6e\x29\x7a\x67\x23\xbd\x06\x5d\x69\x6b\x5c\xcd\xea\x5b\xa2\xc8\xed\x04\x26\xdb\x57\x06\x14\x80\x21\xd9\xee\x4a\x93\xad\x4b\x4c\xb1\x09\xb8\xaa\xf5\xe5\xf4\xaa\x24\x7d\xc5\xd9\x22\xfe\xab\x6c\x90\x0f\xca\xf6\x23\xdd\xd7\xc0\x46\x4c\xd5\xef\x6c\xef\x5d\x9d\x5c\x8a\xa8\x6c\xf9\x67\x4e\x7b\x41\xcc\xfe\x17\x0a\xfb\xea\xfd\x35\xe1\xe7\xfe\x0c\x00\x00\xff\xff\x9b\xdd\xc9\x37\xb8\x01\x00\x00")

func TemplatesServer_resources_interfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesServer_resources_interfaceTmpl,
		"../templates/server_resources_interface.tmpl",
	)
}

func TemplatesServer_resources_interfaceTmpl() (*asset, error) {
	bytes, err := TemplatesServer_resources_interfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/server_resources_interface.tmpl", size: 440, mode: os.FileMode(420), modTime: time.Unix(1455091345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\xba\x94\x1c\xa0\xe0\xd6\xa5\xb8\x70\x6f\x87\x66\x94\xda\x34\x86\x26\x15\xca\x30\x77\x77\x62\xdb\xac\x7e\xfe\xe3\xfd\x61\xf6\xf4\x1c\x22\x81\xcd\x65\x5e\xfa\xf2\x28\x34\xa5\x80\x85\xac\x88\x49\xd8\x8f\xf8\x22\x60\x76\xb7\x2d\x5e\x71\x22\x05\xa6\xac\xa9\xd6\xe0\x6a\x01\x22\xb0\xd9\xc0\x06\xf4\x29\x98\x31\xaa\xd8\x8c\xb4\x9e\xa0\xf9\x62\x58\x08\xda\x33\xb8\xcb\x40\xc1\x67\x15\x98\x2b\x53\x51\xc3\x1f\xbb\xbb\x4e\xea\xbf\x7b\xe7\x4f\x6c\xed\xc1\x6d\xb7\x2f\x52\xf4\x7a\x58\xcc\x91\x7e\x01\x00\x00\xff\xff\x09\x6e\x22\xe8\xb9\x00\x00\x00")

func TemplatesStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesStructTmpl,
		"../templates/struct.tmpl",
	)
}

func TemplatesStructTmpl() (*asset, error) {
	bytes, err := TemplatesStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../templates/struct.tmpl", size: 185, mode: os.FileMode(420), modTime: time.Unix(1455091345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../templates/client_helper_resource.tmpl": TemplatesClient_helper_resourceTmpl,
	"../templates/client_resource.tmpl": TemplatesClient_resourceTmpl,
	"../templates/generic_main.tmpl": TemplatesGeneric_mainTmpl,
	"../templates/python_client.tmpl": TemplatesPython_clientTmpl,
	"../templates/server_main.tmpl": TemplatesServer_mainTmpl,
	"../templates/server_resources_api.tmpl": TemplatesServer_resources_apiTmpl,
	"../templates/server_resources_interface.tmpl": TemplatesServer_resources_interfaceTmpl,
	"../templates/struct.tmpl": TemplatesStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"client_helper_resource.tmpl": &bintree{TemplatesClient_helper_resourceTmpl, map[string]*bintree{}},
			"client_resource.tmpl": &bintree{TemplatesClient_resourceTmpl, map[string]*bintree{}},
			"generic_main.tmpl": &bintree{TemplatesGeneric_mainTmpl, map[string]*bintree{}},
			"python_client.tmpl": &bintree{TemplatesPython_clientTmpl, map[string]*bintree{}},
			"server_main.tmpl": &bintree{TemplatesServer_mainTmpl, map[string]*bintree{}},
			"server_resources_api.tmpl": &bintree{TemplatesServer_resources_apiTmpl, map[string]*bintree{}},
			"server_resources_interface.tmpl": &bintree{TemplatesServer_resources_interfaceTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{TemplatesStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

