#%RAML 1.0
title: Example API
version: v1
mediaType: application/json
types:
  Users:
  User:
resourceTypes:
  - collection:
      description: The collection of <<resourcePathName>>
      get:
        description: Get all <<resourcePathName>>, optionally filtered
        responses:
          200:
            body:
              type: <<resourcePathName>> # e.g. Users
      post:
        description: Create a new <<resourcePathName | !singularize>>
        body:
          application/json:
            type: <<resourcePathName | !singularize>>
        responses:
          200:
            body:
              type: <<resourcePathName | !singularize>>  # e.g. User
  - member:
      get:
        description : get <<resourcePath>>
        responses:
          200:
            body:
              type: <<resourcePathName>> # e.g. User
  - corpResource:
      post?:
        body:
          application/json:
            properties:
              name: string
              age: int
        headers:
          X-Chargeback:
            required: true
      get?:
        description: Get all <<resourcePathName>>
  - searchableCollection:
     get:
       queryParameters:
         <<queryParamName>>:
           description: Return <<resourcePathName>> that have their <<queryParamName>> matching the given value
         <<fallbackParamName>>:
           description: If no values match the value given for <<queryParamName>>, use <<fallbackParamName>> instead
#traits:
#  - secured:
#      description: Some requests require authentication
#      queryParameters:
#        <<methodName>>: # e.g. get:
#          description: A <<methodName>>-token pair is required  # e.g. A get-token pair...
#          example: <<methodName>>=h8duh3uhhu38   # e.g. get=h8duh3uhhu38


/Users:
  type: collection
  #is: [ secured ]
  get:
    is: [ paged, rateLimited ] # this method is also secured

/queues:
  type: corpResource
  get:
    description: get petok
  # will not have a post method defined

/corps:
  type: corpResource
  post:
    description: create corp
  /{id}:
    type: member

/books:
  type: { searchableCollection: { queryParamName: title, fallbackParamName: digest_all_fields } }
  get:
    description : get all books
    # is: [ secured: { tokenName: access_token }, paged: { maxPages: 10 } ]
